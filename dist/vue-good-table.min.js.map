{"version":3,"file":"vue-good-table.min.js","sources":["../src/components/utils/constants.js","../src/components/utils/diacritics.js","../src/components/types/default.js","../node_modules/vue-runtime-helpers/dist/normalize-component.mjs","../src/components/pagination/VgtPaginationPageInfo.vue","../src/components/pagination/VgtPagination.vue","../src/components/VgtGlobalSearch.vue","../src/components/utils/sort.js","../src/components/VgtTableHeader.vue","../src/components/VgtFilterRow.vue","../src/components/VgtHeaderRow.vue","../src/components/types/date.js","../src/components/types/number.js","../src/components/types/decimal.js","../src/components/types/percentage.js","../src/components/types/boolean.js","../src/components/Table.vue","../src/components/types/index.js","../src/index.js"],"sourcesContent":["const DEFAULT_SORT_TYPE = 'asc';\r\nconst SORT_TYPES = {\r\n  Ascending: 'asc',\r\n  Descending: 'desc',\r\n  None: 'none',\r\n};\r\n\r\nconst PAGINATION_MODES = {\r\n  Pages: 'pages',\r\n  Records: 'records',\r\n};\r\nconst DEFAULT_ROWS_PER_PAGE_DROPDOWN = [10, 20, 30, 40, 50];\r\n\r\nexport {\r\n  DEFAULT_SORT_TYPE,\r\n  SORT_TYPES,\r\n\r\n  PAGINATION_MODES,\r\n  DEFAULT_ROWS_PER_PAGE_DROPDOWN,\r\n};\r\n","// all diacritics\r\nlet diacritics = {\r\n  a: [\r\n    \"a\",\r\n    \"à\",\r\n    \"á\",\r\n    \"â\",\r\n    \"ã\",\r\n    \"ä\",\r\n    \"å\",\r\n    \"æ\",\r\n    \"ā\",\r\n    \"ă\",\r\n    \"ą\",\r\n    \"ǎ\",\r\n    \"ǟ\",\r\n    \"ǡ\",\r\n    \"ǻ\",\r\n    \"ȁ\",\r\n    \"ȃ\",\r\n    \"ȧ\",\r\n    \"ɐ\",\r\n    \"ɑ\",\r\n    \"ɒ\",\r\n    \"ͣ\",\r\n    \"а\",\r\n    \"ӑ\",\r\n    \"ӓ\",\r\n    \"ᵃ\",\r\n    \"ᵄ\",\r\n    \"ᶏ\",\r\n    \"ḁ\",\r\n    \"ẚ\",\r\n    \"ạ\",\r\n    \"ả\",\r\n    \"ấ\",\r\n    \"ầ\",\r\n    \"ẩ\",\r\n    \"ẫ\",\r\n    \"ậ\",\r\n    \"ắ\",\r\n    \"ằ\",\r\n    \"ẳ\",\r\n    \"ẵ\",\r\n    \"ặ\",\r\n    \"ₐ\",\r\n    \"ⱥ\",\r\n    \"ａ\",\r\n  ],\r\n  b: [\"b\", \"ƀ\", \"ƃ\", \"ɓ\", \"ᖯ\", \"ᵇ\", \"ᵬ\", \"ᶀ\", \"ḃ\", \"ḅ\", \"ḇ\", \"ｂ\"],\r\n  c: [\"c\", \"ç\", \"ć\", \"ĉ\", \"ċ\", \"č\", \"ƈ\", \"ȼ\", \"ɕ\", \"ͨ\", \"ᴄ\", \"ᶜ\", \"ḉ\", \"ↄ\", \"ｃ\"],\r\n  d: [\r\n    \"d\",\r\n    \"ď\",\r\n    \"đ\",\r\n    \"Ƌ\",\r\n    \"ƌ\",\r\n    \"ȡ\",\r\n    \"ɖ\",\r\n    \"ɗ\",\r\n    \"ͩ\",\r\n    \"ᵈ\",\r\n    \"ᵭ\",\r\n    \"ᶁ\",\r\n    \"ᶑ\",\r\n    \"ḋ\",\r\n    \"ḍ\",\r\n    \"ḏ\",\r\n    \"ḑ\",\r\n    \"ḓ\",\r\n    \"ｄ\",\r\n  ],\r\n  e: [\r\n    \"e\",\r\n    \"è\",\r\n    \"é\",\r\n    \"ê\",\r\n    \"ë\",\r\n    \"ē\",\r\n    \"ĕ\",\r\n    \"ė\",\r\n    \"ę\",\r\n    \"ě\",\r\n    \"ǝ\",\r\n    \"ȅ\",\r\n    \"ȇ\",\r\n    \"ȩ\",\r\n    \"ɇ\",\r\n    \"ɘ\",\r\n    \"ͤ\",\r\n    \"ᵉ\",\r\n    \"ᶒ\",\r\n    \"ḕ\",\r\n    \"ḗ\",\r\n    \"ḙ\",\r\n    \"ḛ\",\r\n    \"ḝ\",\r\n    \"ẹ\",\r\n    \"ẻ\",\r\n    \"ẽ\",\r\n    \"ế\",\r\n    \"ề\",\r\n    \"ể\",\r\n    \"ễ\",\r\n    \"ệ\",\r\n    \"ₑ\",\r\n    \"ｅ\",\r\n  ],\r\n  f: [\"f\", \"ƒ\", \"ᵮ\", \"ᶂ\", \"ᶠ\", \"ḟ\", \"ｆ\"],\r\n  g: [\"g\", \"ĝ\", \"ğ\", \"ġ\", \"ģ\", \"ǥ\", \"ǧ\", \"ǵ\", \"ɠ\", \"ɡ\", \"ᵍ\", \"ᵷ\", \"ᵹ\", \"ᶃ\", \"ᶢ\", \"ḡ\", \"ｇ\"],\r\n  h: [\r\n    \"h\",\r\n    \"ĥ\",\r\n    \"ħ\",\r\n    \"ƕ\",\r\n    \"ȟ\",\r\n    \"ɥ\",\r\n    \"ɦ\",\r\n    \"ʮ\",\r\n    \"ʯ\",\r\n    \"ʰ\",\r\n    \"ʱ\",\r\n    \"ͪ\",\r\n    \"Һ\",\r\n    \"һ\",\r\n    \"ᑋ\",\r\n    \"ᶣ\",\r\n    \"ḣ\",\r\n    \"ḥ\",\r\n    \"ḧ\",\r\n    \"ḩ\",\r\n    \"ḫ\",\r\n    \"ⱨ\",\r\n    \"ｈ\",\r\n  ],\r\n  i: [\r\n    \"i\",\r\n    \"ì\",\r\n    \"í\",\r\n    \"î\",\r\n    \"ï\",\r\n    \"ĩ\",\r\n    \"ī\",\r\n    \"ĭ\",\r\n    \"į\",\r\n    \"ǐ\",\r\n    \"ȉ\",\r\n    \"ȋ\",\r\n    \"ɨ\",\r\n    \"ͥ\",\r\n    \"ᴉ\",\r\n    \"ᵎ\",\r\n    \"ᵢ\",\r\n    \"ᶖ\",\r\n    \"ᶤ\",\r\n    \"ḭ\",\r\n    \"ḯ\",\r\n    \"ỉ\",\r\n    \"ị\",\r\n    \"ｉ\",\r\n  ],\r\n  j: [\"j\", \"ĵ\", \"ǰ\", \"ɉ\", \"ʝ\", \"ʲ\", \"ᶡ\", \"ᶨ\", \"ｊ\"],\r\n  k: [\"k\", \"ķ\", \"ƙ\", \"ǩ\", \"ʞ\", \"ᵏ\", \"ᶄ\", \"ḱ\", \"ḳ\", \"ḵ\", \"ⱪ\", \"ｋ\"],\r\n  l: [\r\n    \"l\",\r\n    \"ĺ\",\r\n    \"ļ\",\r\n    \"ľ\",\r\n    \"ŀ\",\r\n    \"ł\",\r\n    \"ƚ\",\r\n    \"ȴ\",\r\n    \"ɫ\",\r\n    \"ɬ\",\r\n    \"ɭ\",\r\n    \"ˡ\",\r\n    \"ᶅ\",\r\n    \"ᶩ\",\r\n    \"ᶪ\",\r\n    \"ḷ\",\r\n    \"ḹ\",\r\n    \"ḻ\",\r\n    \"ḽ\",\r\n    \"ℓ\",\r\n    \"ⱡ\",\r\n  ],\r\n  m: [\"m\", \"ɯ\", \"ɰ\", \"ɱ\", \"ͫ\", \"ᴟ\", \"ᵐ\", \"ᵚ\", \"ᵯ\", \"ᶆ\", \"ᶬ\", \"ᶭ\", \"ḿ\", \"ṁ\", \"ṃ\", \"㎡\", \"㎥\", \"ｍ\"],\r\n  n: [\r\n    \"n\",\r\n    \"ñ\",\r\n    \"ń\",\r\n    \"ņ\",\r\n    \"ň\",\r\n    \"ŉ\",\r\n    \"ƞ\",\r\n    \"ǹ\",\r\n    \"ȵ\",\r\n    \"ɲ\",\r\n    \"ɳ\",\r\n    \"ᵰ\",\r\n    \"ᶇ\",\r\n    \"ᶮ\",\r\n    \"ᶯ\",\r\n    \"ṅ\",\r\n    \"ṇ\",\r\n    \"ṉ\",\r\n    \"ṋ\",\r\n    \"ⁿ\",\r\n    \"ｎ\",\r\n  ],\r\n  o: [\r\n    \"o\",\r\n    \"ò\",\r\n    \"ó\",\r\n    \"ô\",\r\n    \"õ\",\r\n    \"ö\",\r\n    \"ø\",\r\n    \"ō\",\r\n    \"ŏ\",\r\n    \"ő\",\r\n    \"ơ\",\r\n    \"ǒ\",\r\n    \"ǫ\",\r\n    \"ǭ\",\r\n    \"ǿ\",\r\n    \"ȍ\",\r\n    \"ȏ\",\r\n    \"ȫ\",\r\n    \"ȭ\",\r\n    \"ȯ\",\r\n    \"ȱ\",\r\n    \"ɵ\",\r\n    \"ͦ\",\r\n    \"о\",\r\n    \"ӧ\",\r\n    \"ө\",\r\n    \"ᴏ\",\r\n    \"ᴑ\",\r\n    \"ᴓ\",\r\n    \"ᴼ\",\r\n    \"ᵒ\",\r\n    \"ᶱ\",\r\n    \"ṍ\",\r\n    \"ṏ\",\r\n    \"ṑ\",\r\n    \"ṓ\",\r\n    \"ọ\",\r\n    \"ỏ\",\r\n    \"ố\",\r\n    \"ồ\",\r\n    \"ổ\",\r\n    \"ỗ\",\r\n    \"ộ\",\r\n    \"ớ\",\r\n    \"ờ\",\r\n    \"ở\",\r\n    \"ỡ\",\r\n    \"ợ\",\r\n    \"ₒ\",\r\n    \"ｏ\",\r\n    \"𐐬\",\r\n  ],\r\n  p: [\"p\", \"ᵖ\", \"ᵱ\", \"ᵽ\", \"ᶈ\", \"ṕ\", \"ṗ\", \"ｐ\"],\r\n  q: [\"q\", \"ɋ\", \"ʠ\", \"ᛩ\", \"ｑ\"],\r\n  r: [\r\n    \"r\",\r\n    \"ŕ\",\r\n    \"ŗ\",\r\n    \"ř\",\r\n    \"ȑ\",\r\n    \"ȓ\",\r\n    \"ɍ\",\r\n    \"ɹ\",\r\n    \"ɻ\",\r\n    \"ʳ\",\r\n    \"ʴ\",\r\n    \"ʵ\",\r\n    \"ͬ\",\r\n    \"ᵣ\",\r\n    \"ᵲ\",\r\n    \"ᶉ\",\r\n    \"ṙ\",\r\n    \"ṛ\",\r\n    \"ṝ\",\r\n    \"ṟ\",\r\n  ],\r\n  s: [\"s\", \"ś\", \"ŝ\", \"ş\", \"š\", \"ș\", \"ʂ\", \"ᔆ\", \"ᶊ\", \"ṡ\", \"ṣ\", \"ṥ\", \"ṧ\", \"ṩ\", \"ｓ\"],\r\n  t: [\r\n    \"t\",\r\n    \"ţ\",\r\n    \"ť\",\r\n    \"ŧ\",\r\n    \"ƫ\",\r\n    \"ƭ\",\r\n    \"ț\",\r\n    \"ʇ\",\r\n    \"ͭ\",\r\n    \"ᵀ\",\r\n    \"ᵗ\",\r\n    \"ᵵ\",\r\n    \"ᶵ\",\r\n    \"ṫ\",\r\n    \"ṭ\",\r\n    \"ṯ\",\r\n    \"ṱ\",\r\n    \"ẗ\",\r\n    \"ｔ\",\r\n  ],\r\n  u: [\r\n    \"u\",\r\n    \"ù\",\r\n    \"ú\",\r\n    \"û\",\r\n    \"ü\",\r\n    \"ũ\",\r\n    \"ū\",\r\n    \"ŭ\",\r\n    \"ů\",\r\n    \"ű\",\r\n    \"ų\",\r\n    \"ư\",\r\n    \"ǔ\",\r\n    \"ǖ\",\r\n    \"ǘ\",\r\n    \"ǚ\",\r\n    \"ǜ\",\r\n    \"ȕ\",\r\n    \"ȗ\",\r\n    \"ͧ\",\r\n    \"ߎ\",\r\n    \"ᵘ\",\r\n    \"ᵤ\",\r\n    \"ṳ\",\r\n    \"ṵ\",\r\n    \"ṷ\",\r\n    \"ṹ\",\r\n    \"ṻ\",\r\n    \"ụ\",\r\n    \"ủ\",\r\n    \"ứ\",\r\n    \"ừ\",\r\n    \"ử\",\r\n    \"ữ\",\r\n    \"ự\",\r\n    \"ｕ\",\r\n  ],\r\n  v: [\"v\", \"ʋ\", \"ͮ\", \"ᵛ\", \"ᵥ\", \"ᶹ\", \"ṽ\", \"ṿ\", \"ⱱ\", \"ｖ\", \"ⱴ\"],\r\n  w: [\"w\", \"ŵ\", \"ʷ\", \"ᵂ\", \"ẁ\", \"ẃ\", \"ẅ\", \"ẇ\", \"ẉ\", \"ẘ\", \"ⱳ\", \"ｗ\"],\r\n  x: [\"x\", \"̽\", \"͓\", \"ᶍ\", \"ͯ\", \"ẋ\", \"ẍ\", \"ₓ\", \"ｘ\"],\r\n  y: [\"y\", \"ý\", \"ÿ\", \"ŷ\", \"ȳ\", \"ɏ\", \"ʸ\", \"ẏ\", \"ỳ\", \"ỵ\", \"ỷ\", \"ỹ\", \"ｙ\"],\r\n  z: [\r\n    \"z\",\r\n    \"ź\",\r\n    \"ż\",\r\n    \"ž\",\r\n    \"ƶ\",\r\n    \"ȥ\",\r\n    \"ɀ\",\r\n    \"ʐ\",\r\n    \"ʑ\",\r\n    \"ᙆ\",\r\n    \"ᙇ\",\r\n    \"ᶻ\",\r\n    \"ᶼ\",\r\n    \"ᶽ\",\r\n    \"ẑ\",\r\n    \"ẓ\",\r\n    \"ẕ\",\r\n    \"ⱬ\",\r\n    \"ｚ\",\r\n  ],\r\n};\r\n\r\n// Precompiled Object with { key = Diacritic, value = real-Character }\r\nconst compiledDiactitics = (function() {\r\n  let x = {};\r\n\r\n  for (let key in diacritics) {\r\n    let ok = diacritics[key];\r\n\r\n    for (let rval in ok) {\r\n      let val = ok[rval];\r\n\r\n      // Do not replace the char with itself\r\n      if (val !== key) {\r\n        x[val] = key;\r\n      }\r\n    }\r\n  }\r\n\r\n  return x;\r\n})();\r\n\r\n// Regex for detecting non-ASCII-Characters in String\r\nconst regexNonASCII = /[^a-z0-9\\s,.-]/;\r\n\r\n/*\r\n * Main function of the module which removes all diacritics from the received text\r\n */\r\nconst diacriticless = (text) => {\r\n  // When there are only ascii-Characters in the string, skip processing and return text right away\r\n  if (text.search(regexNonASCII) === -1) {\r\n    return text;\r\n  }\r\n\r\n  let result = \"\";\r\n\r\n  let len = text.length;\r\n  for (var i = 0; i < len; i++) {\r\n    let searchChar = text.charAt(i);\r\n\r\n    // If applicable replace the diacritic character with the real one or use the original value\r\n    result += searchChar in compiledDiactitics ? compiledDiactitics[searchChar] : searchChar;\r\n  }\r\n\r\n  return result;\r\n};\r\n\r\nexport {diacriticless};\r\n","import { diacriticless } from '../utils/diacritics';\r\n\r\nconst escapeRegExp = str => str.replace(/[\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\r\n\r\nexport default {\r\n  format(x) {\r\n    return x;\r\n  },\r\n  filterPredicate(rowval, filter, skipDiacritics = false, fromDropdown = false) {\r\n    // take care of nulls\r\n    if (typeof rowval === 'undefined' || rowval === null) {\r\n      return false;\r\n    }\r\n\r\n    // row value\r\n    const rowValue = skipDiacritics\r\n      ? String(rowval).toLowerCase()\r\n      : diacriticless(escapeRegExp(String(rowval)).toLowerCase());\r\n\r\n    // search term\r\n    const searchTerm = skipDiacritics\r\n      ? filter.toLowerCase()\r\n      : diacriticless(escapeRegExp(filter).toLowerCase());\r\n\r\n    // comparison\r\n    return fromDropdown ? rowValue === searchTerm : (rowValue.indexOf(searchTerm) > -1);\r\n  },\r\n\r\n  compare(x, y) {\r\n    function cook(d) {\r\n      if (typeof d === 'undefined' || d === null) return '';\r\n      return diacriticless(String(d).toLowerCase());\r\n    }\r\n    x = cook(x);\r\n    y = cook(y);\r\n    if (x < y) return -1;\r\n    if (x > y) return 1;\r\n    return 0;\r\n  },\r\n};\r\n","function normalizeComponent(template, style, script, scopeId, isFunctionalTemplate, moduleIdentifier /* server only */, shadowMode, createInjector, createInjectorSSR, createInjectorShadow) {\r\n    if (typeof shadowMode !== 'boolean') {\r\n        createInjectorSSR = createInjector;\r\n        createInjector = shadowMode;\r\n        shadowMode = false;\r\n    }\r\n    // Vue.extend constructor export interop.\r\n    const options = typeof script === 'function' ? script.options : script;\r\n    // render functions\r\n    if (template && template.render) {\r\n        options.render = template.render;\r\n        options.staticRenderFns = template.staticRenderFns;\r\n        options._compiled = true;\r\n        // functional template\r\n        if (isFunctionalTemplate) {\r\n            options.functional = true;\r\n        }\r\n    }\r\n    // scopedId\r\n    if (scopeId) {\r\n        options._scopeId = scopeId;\r\n    }\r\n    let hook;\r\n    if (moduleIdentifier) {\r\n        // server build\r\n        hook = function (context) {\r\n            // 2.3 injection\r\n            context =\r\n                context || // cached call\r\n                    (this.$vnode && this.$vnode.ssrContext) || // stateful\r\n                    (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext); // functional\r\n            // 2.2 with runInNewContext: true\r\n            if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {\r\n                context = __VUE_SSR_CONTEXT__;\r\n            }\r\n            // inject component styles\r\n            if (style) {\r\n                style.call(this, createInjectorSSR(context));\r\n            }\r\n            // register component module identifier for async chunk inference\r\n            if (context && context._registeredComponents) {\r\n                context._registeredComponents.add(moduleIdentifier);\r\n            }\r\n        };\r\n        // used by ssr in case component is cached and beforeCreate\r\n        // never gets called\r\n        options._ssrRegister = hook;\r\n    }\r\n    else if (style) {\r\n        hook = shadowMode\r\n            ? function (context) {\r\n                style.call(this, createInjectorShadow(context, this.$root.$options.shadowRoot));\r\n            }\r\n            : function (context) {\r\n                style.call(this, createInjector(context));\r\n            };\r\n    }\r\n    if (hook) {\r\n        if (options.functional) {\r\n            // register for functional component in vue file\r\n            const originalRender = options.render;\r\n            options.render = function renderWithStyleInjection(h, context) {\r\n                hook.call(context);\r\n                return originalRender(h, context);\r\n            };\r\n        }\r\n        else {\r\n            // inject component registration as beforeCreate hook\r\n            const existing = options.beforeCreate;\r\n            options.beforeCreate = existing ? [].concat(existing, hook) : [hook];\r\n        }\r\n    }\r\n    return script;\r\n}\n\nexport default normalizeComponent;\n//# sourceMappingURL=normalize-component.mjs.map\n","<template>\r\n<div class=\"footer__navigation__page-info\">\r\n  <div v-if=\"infoFn\">\r\n    {{infoFn(infoParams)}}\r\n  </div>\r\n  <form v-else-if=\"mode === 'pages'\" @submit.prevent>\r\n    <label :for=\"id\" class=\"page-info__label\">\r\n      <span>{{pageText}}</span>\r\n      <input\r\n        :id=\"id\"\r\n        aria-describedby=\"change-page-hint\"\r\n        aria-controls=\"vgb-table\"\r\n        class=\"footer__navigation__page-info__current-entry\"\r\n        type=\"text\"\r\n        @keyup.enter.stop=\"changePage\"\r\n        :value=\"currentPage\"> \r\n      <span>{{pageInfo}}</span>\r\n    </label>\r\n    <span id=\"change-page-hint\" style=\"display: none;\">\r\n      Type a page number and press Enter to change the page.\r\n    </span>\r\n  </form>\r\n  <div v-else>\r\n    {{recordInfo}}\r\n  </div>\r\n</div>\r\n</template>\r\n\r\n<script>\r\nimport {\r\n  PAGINATION_MODES,\r\n} from '../utils/constants';\r\n\r\nexport default {\r\n  name: 'VgtPaginationPageInfo',\r\n  props: {\r\n    currentPage: {\r\n      default: 1,\r\n    },\r\n    lastPage: {\r\n      default: 1,\r\n    },\r\n    totalRecords: {\r\n      default: 0,\r\n    },\r\n    ofText: {\r\n      default: 'of',\r\n      type: String,\r\n    },\r\n    pageText: {\r\n      default: 'page',\r\n      type: String,\r\n    },\r\n    currentPerPage: {},\r\n    mode: {\r\n      default: PAGINATION_MODES.Records,\r\n    },\r\n    infoFn: { default: null },\r\n  },\r\n  data() {\r\n    return {\r\n      id: this.getId(),\r\n    };\r\n  },\r\n  computed: {\r\n    pageInfo() {\r\n      return `${this.ofText} ${this.lastPage}`;\r\n    },\r\n    firstRecordOnPage() {\r\n      return ((this.currentPage - 1) * this.currentPerPage) + 1;\r\n    },\r\n    lastRecordOnPage() {\r\n      // if the setting is set to 'all'\r\n      if(this.currentPerPage === -1) {\r\n        return this.totalRecords;\r\n      }\r\n      return Math.min(this.totalRecords, this.currentPage * this.currentPerPage);\r\n    },\r\n    recordInfo() {\r\n      let first = this.firstRecordOnPage;\r\n      const last = this.lastRecordOnPage;\r\n\r\n      if (last === 0) {\r\n        first = 0;\r\n      }\r\n\r\n      return `${first} - ${last} ${this.ofText} ${this.totalRecords}`;\r\n    },\r\n    infoParams() {\r\n      let first = this.firstRecordOnPage;\r\n      const last = this.lastRecordOnPage;\r\n      if (last === 0) {\r\n        first = 0;\r\n      }\r\n      return {\r\n        firstRecordOnPage: first,\r\n        lastRecordOnPage: last,\r\n        totalRecords: this.totalRecords,\r\n        currentPage: this.currentPage,\r\n        totalPage: this.lastPage,\r\n      };\r\n    },\r\n  },\r\n  methods: {\r\n    getId() {\r\n      return `vgt-page-input-${Math.floor(Math.random() * Date.now())}`;\r\n    },\r\n    changePage(event) {\r\n      const value = parseInt(event.target.value, 10);\r\n\r\n      //! invalid number\r\n      if (Number.isNaN(value)\r\n        || value > this.lastPage\r\n        || value < 1) {\r\n        event.target.value = this.currentPage;\r\n        return false;\r\n      }\r\n\r\n      //* valid number\r\n      event.target.value = value;\r\n      this.$emit('page-changed', value);\r\n    },\r\n  },\r\n  mounted() {\r\n  },\r\n  components: {\r\n  },\r\n};\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n\r\n</style>\r\n","<template>\r\n  <div class=\"vgt-wrap__footer vgt-clearfix\">\r\n    <div v-if=\"perPageDropdownEnabled\" class=\"footer__row-count vgt-pull-left\">\r\n      <form>\r\n        <label :for=\"id\" class=\"footer__row-count__label\">{{rowsPerPageText}}:</label>\r\n        <select\r\n          :id=\"id\"\r\n          autocomplete=\"off\"\r\n          name=\"perPageSelect\"\r\n          class=\"footer__row-count__select\"\r\n          v-model=\"currentPerPage\"\r\n          @change=\"perPageChanged\"\r\n          aria-controls=\"vgt-table\">\r\n          <option\r\n            v-for=\"(option, idx) in rowsPerPageOptions\"\r\n            :key=\"idx\"\r\n            :value=\"option\">\r\n            {{ option }}\r\n          </option>\r\n          <option v-if=\"paginateDropdownAllowAll\" :value=\"-1\">{{allText}}</option>\r\n        </select>\r\n      </form>\r\n    </div>\r\n    <div class=\"footer__navigation vgt-pull-right\">\r\n      <pagination-page-info\r\n        @page-changed=\"changePage\"\r\n        :total-records=\"total\"\r\n        :last-page=\"pagesCount\"\r\n        :current-page=\"currentPage\"\r\n        :current-per-page=\"currentPerPage\"\r\n        :of-text=\"ofText\"\r\n        :page-text=\"pageText\"\r\n        :info-fn=\"infoFn\"\r\n        :mode=\"mode\" />\r\n      <button\r\n        v-if=\"jumpFirstOrLast\"\r\n        type=\"button\"\r\n        aria-controls=\"vgt-table\"\r\n        class=\"footer__navigation__page-btn\"\r\n        :class=\"{ disabled: !firstIsPossible }\"\r\n        @click.prevent.stop=\"firstPage\"\r\n      >\r\n        <span\r\n          aria-hidden=\"true\"\r\n          class=\"chevron\"\r\n          v-bind:class=\"{ left: !rtl, right: rtl }\"\r\n        ></span>\r\n        <span>{{ firstText }}</span>\r\n      </button>\r\n\r\n      <button\r\n        type=\"button\"\r\n        aria-controls=\"vgt-table\"\r\n        class=\"footer__navigation__page-btn\"\r\n        :class=\"{ disabled: !prevIsPossible }\"\r\n        @click.prevent.stop=\"previousPage\">\r\n        <span aria-hidden=\"true\" class=\"chevron\" v-bind:class=\"{ 'left': !rtl, 'right': rtl }\"></span>\r\n        <span>{{prevText}}</span>\r\n      </button>\r\n\r\n      <button\r\n        type=\"button\"\r\n        aria-controls=\"vgt-table\"\r\n        class=\"footer__navigation__page-btn\"\r\n        :class=\"{ disabled: !nextIsPossible }\"\r\n        @click.prevent.stop=\"nextPage\">\r\n        <span>{{nextText}}</span>\r\n        <span aria-hidden=\"true\" class=\"chevron\" v-bind:class=\"{ 'right': !rtl, 'left': rtl }\"></span>\r\n      </button>\r\n\r\n      <button\r\n        v-if=\"jumpFirstOrLast\"\r\n        type=\"button\"\r\n        aria-controls=\"vgt-table\"\r\n        class=\"footer__navigation__page-btn\"\r\n        :class=\"{ disabled: !lastIsPossible }\"\r\n        @click.prevent.stop=\"lastPage\"\r\n      >\r\n        <span>{{ lastText }}</span>\r\n        <span\r\n          aria-hidden=\"true\"\r\n          class=\"chevron\"\r\n          v-bind:class=\"{ right: !rtl, left: rtl }\"\r\n        ></span>\r\n      </button>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport VgtPaginationPageInfo from './VgtPaginationPageInfo.vue';\r\nimport {\r\n  PAGINATION_MODES,\r\n  DEFAULT_ROWS_PER_PAGE_DROPDOWN\r\n} from '../utils/constants';\r\n\r\nexport default {\r\n  name: 'VgtPagination',\r\n  props: {\r\n    styleClass: { default: 'table table-bordered' },\r\n    total: { default: null },\r\n    perPage: {},\r\n    rtl: { default: false },\r\n    perPageDropdownEnabled: { default: true },\r\n    customRowsPerPageDropdown: { default() { return []; } },\r\n    paginateDropdownAllowAll: { default: true },\r\n    mode: { default: PAGINATION_MODES.Records },\r\n    jumpFirstOrLast: { default: false },\r\n\r\n    // text options\r\n    firstText: { default: \"First\" },\r\n    lastText: { default: \"Last\" },\r\n    nextText: { default: 'Next' },\r\n    prevText: { default: 'Prev' },\r\n    rowsPerPageText: { default: 'Rows per page:' },\r\n    ofText: { default: 'of' },\r\n    pageText: { default: 'page' },\r\n    allText: { default: 'All' },\r\n    infoFn: { default: null },\r\n  },\r\n\r\n  data() {\r\n    return {\r\n      id: this.getId(),\r\n      currentPage: 1,\r\n      prevPage: 0,\r\n      currentPerPage: 10,\r\n      rowsPerPageOptions: [],\r\n    };\r\n  },\r\n  watch: {\r\n    perPage: {\r\n      handler(newValue, oldValue) {\r\n        this.handlePerPage();\r\n        this.perPageChanged(oldValue);\r\n      },\r\n      immediate: true,\r\n    },\r\n\r\n    customRowsPerPageDropdown() {\r\n      this.handlePerPage();\r\n    },\r\n\r\n    total: {\r\n      handler(newValue, oldValue) {\r\n        if(this.rowsPerPageOptions.indexOf(this.currentPerPage) === -1) {\r\n          this.currentPerPage = newValue;\r\n        }\r\n      }\r\n    }\r\n  },\r\n\r\n  computed: {\r\n    // Number of pages\r\n    pagesCount() {\r\n      // if the setting is set to 'all'\r\n      if(this.currentPerPage === -1) {\r\n        return 1;\r\n      }\r\n      const quotient = Math.floor(this.total / this.currentPerPage);\r\n      const remainder = this.total % this.currentPerPage;\r\n\r\n      return remainder === 0 ? quotient : quotient + 1;\r\n    },\r\n\r\n    // Can go to first page\r\n    firstIsPossible() {\r\n      return this.currentPage > 1;\r\n    },\r\n\r\n    // Can go to last page\r\n    lastIsPossible() {\r\n      return this.currentPage < Math.ceil(this.total / this.currentPerPage);\r\n    },\r\n\r\n    // Can go to next page\r\n    nextIsPossible() {\r\n      return this.currentPage < this.pagesCount;\r\n    },\r\n\r\n    // Can go to previous page\r\n    prevIsPossible() {\r\n      return this.currentPage > 1;\r\n    },\r\n  },\r\n\r\n  methods: {\r\n    getId() {\r\n      return `vgt-select-rpp-${Math.floor(Math.random() * Date.now())}`;\r\n    },\r\n    // Change current page\r\n    changePage(pageNumber, emit = true) {\r\n      if (pageNumber > 0 && this.total > this.currentPerPage * (pageNumber - 1)) {\r\n        this.prevPage = this.currentPage;\r\n        this.currentPage = pageNumber;\r\n        this.pageChanged(emit);\r\n      }\r\n    },\r\n\r\n    // Go to first page\r\n    firstPage() {\r\n      if (this.firstIsPossible) {\r\n        this.currentPage = 1;\r\n        this.prevPage = 0;\r\n        this.pageChanged();\r\n      }\r\n    },\r\n\r\n    // Go to last page\r\n    lastPage() {\r\n      if (this.lastIsPossible) {\r\n        this.currentPage = this.pagesCount;\r\n        this.prev = this.currentPage - 1;\r\n        this.pageChanged();\r\n      }\r\n    },\r\n\r\n    // Go to next page\r\n    nextPage() {\r\n      if (this.nextIsPossible) {\r\n        this.prevPage = this.currentPage;\r\n        ++this.currentPage;\r\n        this.pageChanged();\r\n      }\r\n    },\r\n\r\n    // Go to previous page\r\n    previousPage() {\r\n      if (this.prevIsPossible) {\r\n        this.prevPage = this.currentPage;\r\n        --this.currentPage;\r\n        this.pageChanged();\r\n      }\r\n    },\r\n\r\n    // Indicate page changing\r\n    pageChanged(emit = true) {\r\n      const payload = {\r\n        currentPage: this.currentPage,\r\n        prevPage: this.prevPage,\r\n      };\r\n      if (!emit) payload.noEmit = true;\r\n      this.$emit('page-changed', payload);\r\n    },\r\n\r\n    // Indicate per page changing\r\n    perPageChanged(oldValue) {\r\n      // go back to first page\r\n      if (oldValue) {\r\n        //* only emit if this isn't first initialization\r\n        this.$emit('per-page-changed', { currentPerPage: this.currentPerPage });\r\n      }\r\n      this.changePage(1, false);\r\n    },\r\n\r\n    // Handle per page changing\r\n    handlePerPage() {\r\n      //* if there's a custom dropdown then we use that\r\n      if (this.customRowsPerPageDropdown !== null\r\n        && (Array.isArray(this.customRowsPerPageDropdown)\r\n        && this.customRowsPerPageDropdown.length !== 0)) {\r\n        this.rowsPerPageOptions = JSON.parse(JSON.stringify(this.customRowsPerPageDropdown));\r\n      } else {\r\n        //* otherwise we use the default rows per page dropdown\r\n        this.rowsPerPageOptions = JSON.parse(JSON.stringify(DEFAULT_ROWS_PER_PAGE_DROPDOWN));\r\n      }\r\n\r\n      if (this.perPage) {\r\n        this.currentPerPage = this.perPage;\r\n        // if perPage doesn't already exist, we add it\r\n        let found = false;\r\n        for (let i = 0; i < this.rowsPerPageOptions.length; i++) {\r\n          if (this.rowsPerPageOptions[i] === this.perPage) {\r\n            found = true;\r\n          }\r\n        }\r\n        if (!found && this.perPage !== -1) {\r\n          this.rowsPerPageOptions.unshift(this.perPage);\r\n        }\r\n      } else {\r\n        // reset to default\r\n        this.currentPerPage = 10;\r\n      }\r\n    },\r\n  },\r\n\r\n  mounted() {\r\n  },\r\n\r\n  components: {\r\n    'pagination-page-info': VgtPaginationPageInfo,\r\n  },\r\n};\r\n</script>\r\n\r\n<style lang=\"scss\">\r\n\r\n</style>\r\n","<template>\r\n<div v-if=\"showControlBar\" class=\"vgt-global-search vgt-clearfix\">\r\n  <div class=\"vgt-global-search__input vgt-pull-left\">\r\n    <form @submit.prevent v-if=\"searchEnabled\" role=\"search\">\r\n      <label :for=\"id\">\r\n        <span aria-hidden=\"true\" class=\"input__icon\">\r\n        <div class=\"magnifying-glass\"></div>\r\n        </span>\r\n        <span class=\"sr-only\">Search</span>\r\n      </label>\r\n    <input\r\n      :id=\"id\"\r\n      type=\"text\"\r\n      class=\"vgt-input vgt-pull-left\"\r\n      :placeholder=\"globalSearchPlaceholder\"\r\n      :value=\"value\"\r\n      @input=\"updateValue($event.target.value)\"\r\n      @keyup.enter=\"entered($event.target.value)\" />\r\n    </form>\r\n  </div>\r\n\r\n  <div class=\"vgt-global-search__actions vgt-pull-right\">\r\n    <slot name=\"internal-table-actions\">\r\n    </slot>\r\n  </div>\r\n</div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: 'VgtGlobalSearch',\r\n  props: [\r\n    'value',\r\n    'searchEnabled',\r\n    'globalSearchPlaceholder',\r\n  ],\r\n  data() {\r\n    return {\r\n      globalSearchTerm: null,\r\n      id: this.getId(),\r\n    };\r\n  },\r\n  computed: {\r\n    showControlBar() {\r\n      if (this.searchEnabled) return true;\r\n      if (this.$slots && this.$slots['internal-table-actions']) return true;\r\n      return false;\r\n    },\r\n  },\r\n  methods: {\r\n    updateValue(value) {\r\n      this.$emit('input', value);\r\n      this.$emit('on-keyup', value);\r\n    },\r\n    entered(value) {\r\n      this.$emit('on-enter', value);\r\n    },\r\n    getId() {\r\n      return `vgt-search-${Math.floor(Math.random() * Date.now())}`;\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style>\r\n\r\n</style>\r\n","import {\r\n  DEFAULT_SORT_TYPE,\r\n  SORT_TYPES,\r\n} from './constants';\r\n\r\nfunction getColumnFirstSortType(column) {\r\n  return column.firstSortType || DEFAULT_SORT_TYPE;\r\n}\r\n\r\nfunction getCurrentPrimarySort(sortArray, column) {\r\n  return ( sortArray.length === 1 && sortArray[0].field === column.field )\r\n  ? sortArray[0].type\r\n  : undefined;\r\n}\r\n\r\nfunction getNextSort(currentSort, column) {\r\n  if (SORT_TYPES.Descending === getColumnFirstSortType(column)\r\n    && currentSort === SORT_TYPES.Ascending) {\r\n    return SORT_TYPES.None\r\n  } else if (currentSort === SORT_TYPES.Ascending) {\r\n    return SORT_TYPES.Descending;\r\n  }\r\n  if (SORT_TYPES.Descending === getColumnFirstSortType(column)\r\n    && currentSort === SORT_TYPES.Descending) {\r\n    return SORT_TYPES.Ascending;\r\n  } else if (currentSort === SORT_TYPES.Descending) {\r\n    return SORT_TYPES.None;\r\n  }\r\n\r\n  if (SORT_TYPES.Descending === getColumnFirstSortType(column)\r\n    && currentSort === SORT_TYPES.None) {\r\n    return SORT_TYPES.Descending;\r\n  } else {\r\n    return SORT_TYPES.Ascending;\r\n  }\r\n\r\n}\r\n\r\nfunction getIndex(sortArray, column) {\r\n  for (let i = 0; i < sortArray.length; i++) {\r\n    if (column.field === sortArray[i].field) return i;\r\n  }\r\n  return -1;\r\n}\r\n\r\nconst primarySort = (sortArray, column) => {\r\n  const currentPrimarySort = getCurrentPrimarySort(sortArray, column);\r\n  const nextPrimarySort = getNextSort(currentPrimarySort, column);\r\n  return [{\r\n    field: column.field,\r\n    type: currentPrimarySort ? nextPrimarySort : getColumnFirstSortType(column),\r\n  }];\r\n};\r\n\r\nconst secondarySort = (sortArray, column) => {\r\n  const index = getIndex(sortArray, column);\r\n  if (index === -1) {\r\n    sortArray.push({\r\n      field: column.field,\r\n      type: getColumnFirstSortType(column),\r\n    });\r\n  } else {\r\n    sortArray[index].type = getNextSort(sortArray[index].type, column);\r\n  }\r\n  return sortArray;\r\n};\r\n\r\nexport {\r\n  primarySort,\r\n  secondarySort,\r\n}","<template>\r\n<thead>\r\n  <tr>\r\n    <th scope=\"col\" v-if=\"lineNumbers\" class=\"line-numbers\"></th>\r\n    <th scope=\"col\" v-if=\"selectable\" class=\"vgt-checkbox-col\">\r\n      <input\r\n        type=\"checkbox\"\r\n        :checked=\"allSelected\"\r\n        :indeterminate.prop=\"allSelectedIndeterminate\"\r\n        @change=\"toggleSelectAll\" />\r\n    </th>\r\n    <th v-for=\"(column, index) in columns\"\r\n      scope=\"col\"\r\n      :key=\"index\"\r\n      :title=\"column.tooltip\"\r\n      :class=\"getHeaderClasses(column, index)\"\r\n      :style=\"columnStyles[index]\"\r\n      :aria-sort=\"getColumnSortLong(column)\"\r\n      :aria-controls=\"`col-${index}`\"\r\n      v-if=\"!column.hidden\">\r\n      <slot name=\"table-column\" :column=\"column\">\r\n        {{column.label}}\r\n      </slot>\r\n        <button\r\n        v-if=\"isSortableColumn(column)\"\r\n        @click=\"sort($event, column)\">\r\n        <span class=\"sr-only\">\r\n          Sort table by {{ column.label }} in {{ getColumnSortLong(column) }} order\r\n          </span>\r\n        </button>\r\n    </th>\r\n  </tr>\r\n  <tr\r\n    is=\"vgt-filter-row\"\r\n    ref=\"filter-row\"\r\n    @filter-changed=\"filterRows\"\r\n    :global-search-enabled=\"searchEnabled\"\r\n    :line-numbers=\"lineNumbers\"\r\n    :selectable=\"selectable\"\r\n    :columns=\"columns\"\r\n    :mode=\"mode\"\r\n    :typed-columns=\"typedColumns\">\r\n      <template\r\n        slot=\"column-filter\"\r\n        slot-scope=\"props\"\r\n      >\r\n        <slot\r\n          name=\"column-filter\"\r\n          :column=\"props.column\"\r\n          :updateFilters=\"props.updateFilters\"\r\n        >\r\n        </slot>\r\n      </template>\r\n  </tr>\r\n</thead>\r\n</template>\r\n\r\n<script>\r\nimport VgtFilterRow from './VgtFilterRow.vue';\r\nimport { primarySort, secondarySort } from './utils/sort';\r\n\r\nexport default {\r\n  name: 'VgtTableHeader',\r\n  props: {\r\n    lineNumbers: {\r\n      default: false,\r\n      type: Boolean,\r\n    },\r\n    selectable: {\r\n      default: false,\r\n      type: Boolean,\r\n    },\r\n    allSelected: {\r\n      default: false,\r\n      type: Boolean,\r\n    },\r\n    allSelectedIndeterminate: {\r\n      default: false,\r\n      type: Boolean,\r\n    },\r\n    columns: {\r\n      type: Array,\r\n    },\r\n    mode: {\r\n      type: String,\r\n    },\r\n    typedColumns: {},\r\n\r\n    //* Sort related\r\n    sortable: {\r\n      type: Boolean,\r\n    },\r\n    multipleColumnSort: {\r\n      type: Boolean,\r\n      default: true,\r\n    },\r\n\r\n    getClasses: {\r\n      type: Function,\r\n    },\r\n\r\n    //* search related\r\n    searchEnabled: {\r\n      type: Boolean,\r\n    },\r\n\r\n    tableRef: {},\r\n\r\n    paginated: {},\r\n  },\r\n  watch: {\r\n    columns: {\r\n      handler() {\r\n        this.setColumnStyles();\r\n      },\r\n      immediate: true,\r\n    },\r\n    tableRef: {\r\n      handler() {\r\n        this.setColumnStyles();\r\n      },\r\n      immediate: true,\r\n    },\r\n    paginated: {\r\n      handler() {\r\n        if (this.tableRef) {\r\n          this.setColumnStyles();\r\n        }\r\n      },\r\n      deep: true,\r\n    },\r\n  },\r\n  data() {\r\n    return {\r\n      checkBoxThStyle: {},\r\n      lineNumberThStyle: {},\r\n      columnStyles: [],\r\n      sorts: [],\r\n      ro: null\r\n    };\r\n  },\r\n  computed: {\r\n\r\n  },\r\n  methods: {\r\n    reset() {\r\n      this.$refs['filter-row'].reset(true);\r\n    },\r\n    toggleSelectAll() {\r\n      this.$emit('on-toggle-select-all');\r\n    },\r\n    isSortableColumn(column) {\r\n      const { sortable } = column;\r\n      const isSortable = typeof sortable === 'boolean' ? sortable : this.sortable;\r\n      return isSortable;\r\n    },\r\n    sort(e, column) {\r\n      //* if column is not sortable, return right here\r\n      if (!this.isSortableColumn(column)) return;\r\n\r\n      if (e.shiftKey && this.multipleColumnSort) {\r\n        this.sorts = secondarySort(this.sorts, column);\r\n      } else {\r\n        this.sorts = primarySort(this.sorts, column);\r\n      }\r\n      this.$emit('on-sort-change', this.sorts);\r\n    },\r\n\r\n    setInitialSort(sorts) {\r\n      this.sorts = sorts;\r\n      this.$emit('on-sort-change', this.sorts);\r\n    },\r\n\r\n    getColumnSort(column) {\r\n      for (let i = 0; i < this.sorts.length; i += 1) {\r\n        if (this.sorts[i].field === column.field) {\r\n          return this.sorts[i].type || 'asc';\r\n        }\r\n      }\r\n      return null;\r\n    },\r\n\r\n    getColumnSortLong(column) {\r\n      return this.getColumnSort(column) === 'asc'\r\n        ? 'ascending'\r\n        : 'descending'\r\n    },\r\n\r\n    getHeaderClasses(column, index) {\r\n      const classes = Object.assign({}, this.getClasses(index, 'th'), {\r\n        sortable: this.isSortableColumn(column),\r\n        'sorting sorting-desc': this.getColumnSort(column) === 'desc',\r\n        'sorting sorting-asc': this.getColumnSort(column) === 'asc',\r\n      });\r\n      return classes;\r\n    },\r\n\r\n    filterRows(columnFilters) {\r\n      this.$emit('filter-changed', columnFilters);\r\n    },\r\n\r\n    getWidthStyle(dom) {\r\n      if (window && window.getComputedStyle && dom) {\r\n        const cellStyle = window.getComputedStyle(dom, null);\r\n        return {\r\n          width: cellStyle.width,\r\n        };\r\n      }\r\n      return {\r\n        width: 'auto',\r\n      };\r\n    },\r\n\r\n    setColumnStyles() {\r\n      const colStyles = [];\r\n      for (let i = 0; i < this.columns.length; i++) {\r\n        if (this.tableRef) {\r\n          let skip = 0;\r\n          if (this.selectable) skip++;\r\n          if (this.lineNumbers) skip++;\r\n          const cell = this.tableRef.rows[0].cells[i + skip];\r\n          colStyles.push(this.getWidthStyle(cell));\r\n        } else {\r\n          colStyles.push({\r\n            minWidth: this.columns[i].width ? this.columns[i].width : 'auto',\r\n            maxWidth: this.columns[i].width ? this.columns[i].width : 'auto',\r\n            width: this.columns[i].width ? this.columns[i].width : 'auto',\r\n          });\r\n        }\r\n      }\r\n      this.columnStyles = colStyles;\r\n    },\r\n\r\n    getColumnStyle(column, index) {\r\n      const styleObject = {\r\n        minWidth: column.width ? column.width : 'auto',\r\n        maxWidth: column.width ? column.width : 'auto',\r\n        width: column.width ? column.width : 'auto',\r\n      };\r\n      //* if fixed header we need to get width from original table\r\n      if (this.tableRef) {\r\n        if (this.selectable) index++;\r\n        if (this.lineNumbers) index++;\r\n\r\n        const cell = this.tableRef.rows[0].cells[index];\r\n        const cellStyle = window.getComputedStyle(cell, null);\r\n        styleObject.width = cellStyle.width;\r\n      }\r\n      return styleObject;\r\n    },\r\n  },\r\n  mounted() {\r\n    this.$nextTick(() => {\r\n      // We're going to watch the parent element for resize events, and calculate column widths if it changes\r\n      if ('ResizeObserver' in window) {\r\n        this.ro = new ResizeObserver(() => {\r\n            this.setColumnStyles();\r\n        });\r\n        this.ro.observe(this.$parent.$el);\r\n\r\n        // If this is a fixed-header table, we want to observe each column header from the non-fixed header.\r\n        // You can imagine two columns swapping widths, which wouldn't cause the above to trigger.\r\n        // This gets the first tr element of the primary table header, and iterates through its children (the th elements)\r\n        if (this.tableRef) {\r\n          Array.from(this.$parent.$refs['table-header-primary'].$el.children[0].children).forEach((header) => {\r\n            this.ro.observe(header);\r\n          })\r\n        }\r\n      }\r\n    });\r\n  },\r\n  beforeDestroy() {\r\n    if (this.ro) {\r\n      this.ro.disconnect();\r\n    }\r\n  },\r\n  components: {\r\n    'vgt-filter-row': VgtFilterRow,\r\n  },\r\n};\r\n</script>\r\n","<template>\r\n<tr v-if=\"hasFilterRow\">\r\n  <th v-if=\"lineNumbers\"></th>\r\n  <th v-if=\"selectable\"></th>\r\n  <th\r\n    v-for=\"(column, index) in columns\" :key=\"index\"\r\n    v-if=\"!column.hidden\"\r\n    :class=\"getClasses(column)\"\r\n    >\r\n\r\n    <slot\r\n        name=\"column-filter\"\r\n        :column=\"column\"\r\n        :updateFilters=\"updateSlotFilter\"\r\n    >\r\n\r\n      <div\r\n        v-if=\"isFilterable(column)\">\r\n        <input v-if=\"!isDropdown(column)\"\r\n          :name=\"getName(column)\"\r\n          type=\"text\"\r\n          class=\"vgt-input\"\r\n          :placeholder=\"getPlaceholder(column)\"\r\n          :value=\"columnFilters[fieldKey(column.field)]\"\r\n          @keyup.enter=\"updateFiltersOnEnter(column, $event.target.value)\"\r\n          @input=\"updateFiltersOnKeyup(column, $event.target.value)\" />\r\n\r\n        <!-- options are a list of primitives -->\r\n        <select v-if=\"isDropdownArray(column)\"\r\n          :name=\"getName(column)\"\r\n          class=\"vgt-select\"\r\n          :value=\"columnFilters[fieldKey(column.field)]\"\r\n          @change=\"updateFiltersImmediately(column.field, $event.target.value)\">\r\n            <option value=\"\" key=\"-1\">{{ getPlaceholder(column) }}</option>\r\n            <option\r\n              v-for=\"(option, i) in column.filterOptions.filterDropdownItems\"\r\n              :key=\"i\"\r\n              :value=\"option\">\r\n              {{ option }}\r\n            </option>\r\n        </select>\r\n\r\n        <!-- options are a list of objects with text and value -->\r\n        <select v-if=\"isDropdownObjects(column)\"\r\n          :name=\"getName(column)\"\r\n          class=\"vgt-select\"\r\n          :value=\"columnFilters[fieldKey(column.field)]\"\r\n          @change=\"updateFiltersImmediately(column.field, $event.target.value)\">\r\n          <option value=\"\" key=\"-1\">{{ getPlaceholder(column) }}</option>\r\n          <option\r\n            v-for=\"(option, i) in column.filterOptions.filterDropdownItems\"\r\n            :key=\"i\"\r\n            :value=\"option.value\">{{ option.text }}</option>\r\n        </select>\r\n\r\n      </div>\r\n    </slot>\r\n  </th>\r\n</tr>\r\n</template>\r\n\r\n<script>\r\n\r\nexport default {\r\n  name: 'VgtFilterRow',\r\n  props: [\r\n    'lineNumbers',\r\n    'columns',\r\n    'typedColumns',\r\n    'globalSearchEnabled',\r\n    'selectable',\r\n    'mode',\r\n  ],\r\n  watch: {\r\n    columns: {\r\n      handler(newValue, oldValue) {\r\n        this.populateInitialFilters();\r\n      },\r\n      deep: true,\r\n      immediate: true,\r\n    },\r\n  },\r\n  data() {\r\n    return {\r\n      columnFilters: {},\r\n      timer: null,\r\n    };\r\n  },\r\n  computed: {\r\n\r\n    // to create a filter row, we need to\r\n    // make sure that there is atleast 1 column\r\n    // that requires filtering\r\n    hasFilterRow() {\r\n      // if (this.mode === 'remote' || !this.globalSearchEnabled) {\r\n      for (let i = 0; i < this.columns.length; i++) {\r\n        const col = this.columns[i];\r\n        if (col.filterOptions && col.filterOptions.enabled) {\r\n          return true;\r\n        }\r\n      }\r\n      // }\r\n      return false;\r\n    },\r\n  },\r\n  methods: {\r\n\r\n    fieldKey(field) {\r\n      if (typeof(field) === 'function' && field.name) {\r\n        return field.name;\r\n      }\r\n      return field;\r\n    },\r\n\r\n    reset(emitEvent = false) {\r\n      this.columnFilters = {};\r\n\r\n      if (emitEvent) {\r\n        this.$emit('filter-changed', this.columnFilters);\r\n      }\r\n    },\r\n\r\n    isFilterable(column) {\r\n      return column.filterOptions\r\n        && column.filterOptions.enabled;\r\n    },\r\n\r\n    isDropdown(column) {\r\n      return this.isFilterable(column)\r\n        && column.filterOptions.filterDropdownItems\r\n        && column.filterOptions.filterDropdownItems.length;\r\n    },\r\n\r\n    isDropdownObjects(column) {\r\n      return this.isDropdown(column)\r\n        && typeof column.filterOptions.filterDropdownItems[0] === 'object';\r\n    },\r\n\r\n    isDropdownArray(column) {\r\n      return this.isDropdown(column)\r\n        && typeof column.filterOptions.filterDropdownItems[0] !== 'object';\r\n    },\r\n\r\n    getClasses(column) {\r\n      const firstClass = 'filter-th';\r\n      return (column.filterOptions && column.filterOptions.styleClass) ? [firstClass, ...column.filterOptions.styleClass.split(' ')].join(' ') : firstClass;\r\n    },\r\n\r\n    // get column's defined placeholder or default one\r\n    getPlaceholder(column) {\r\n      const placeholder = (this.isFilterable(column) && column.filterOptions.placeholder) || `Filter ${column.label}`;\r\n      return placeholder;\r\n    },\r\n\r\n    getName(column) {\r\n      return `vgt-${this.fieldKey(column.field)}`;\r\n    },\r\n\r\n    updateFiltersOnEnter(column, value) {\r\n      if (this.timer) clearTimeout(this.timer);\r\n      this.updateFiltersImmediately(column.field, value);\r\n    },\r\n\r\n    updateFiltersOnKeyup(column, value) {\r\n      // if the trigger is enter, we don't filter on keyup\r\n      if (column.filterOptions.trigger === 'enter') return;\r\n      this.updateFilters(column, value);\r\n    },\r\n\r\n    updateSlotFilter(column, value) {\r\n      let fieldToFilter = column.filterOptions.slotFilterField || column.field;\r\n      if (typeof column.filterOptions.formatValue === 'function') {\r\n        value = column.filterOptions.formatValue(value);\r\n      }\r\n      this.updateFiltersImmediately(fieldToFilter, value);\r\n    },\r\n\r\n    // since vue doesn't detect property addition and deletion, we\r\n    // need to create helper function to set property etc\r\n    updateFilters(column, value) {\r\n      if (this.timer) clearTimeout(this.timer);\r\n      this.timer = setTimeout(() => {\r\n        this.updateFiltersImmediately(column.field, value);\r\n      }, 400);\r\n    },\r\n\r\n    updateFiltersImmediately(field, value) {\r\n      this.$set(this.columnFilters, this.fieldKey(field), value);\r\n      this.$emit('filter-changed', this.columnFilters);\r\n    },\r\n\r\n    populateInitialFilters() {\r\n      for (let i = 0; i < this.columns.length; i++) {\r\n        const col = this.columns[i];\r\n        // lets see if there are initial\r\n        // filters supplied by user\r\n        if (this.isFilterable(col)\r\n          && typeof col.filterOptions.filterValue !== 'undefined'\r\n          && col.filterOptions.filterValue !== null) {\r\n          this.$set(this.columnFilters, this.fieldKey(col.field), col.filterOptions.filterValue);\r\n          // this.updateFilters(col, col.filterOptions.filterValue);\r\n          // this.$set(col.filterOptions, 'filterValue', undefined);\r\n        }\r\n      }\r\n      //* lets emit event once all filters are set\r\n      this.$emit('filter-changed', this.columnFilters);\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n\r\n</style>\r\n","<template>\r\n<tr>\r\n  <th\r\n    v-if=\"headerRow.mode === 'span'\"\r\n    class=\"vgt-left-align vgt-row-header\"\r\n    :colspan=\"fullColspan\"\r\n    >\r\n    <template v-if=\"selectAllByGroup\">\r\n      <slot name=\"table-header-group-select\"\r\n        :columns=\"columns\"\r\n        :row=\"headerRow\"\r\n      >\r\n        <input\r\n          type=\"checkbox\"\r\n          :checked=\"allSelected\"\r\n          @change=\"toggleSelectGroup($event)\" />\r\n      </slot>\r\n    </template>\r\n    <span @click=\"collapsable ? $emit('vgtExpand', !headerRow.vgtIsExpanded) : () => {}\">\r\n      <span v-if=\"collapsable\" class=\"triangle\" :class=\"{ 'expand': headerRow.vgtIsExpanded }\"></span>\r\n        <slot\r\n        :row=\"headerRow\"\r\n        name=\"table-header-row\">\r\n        <span v-if=\"headerRow.html\" v-html=\"headerRow.label\">\r\n        </span>\r\n        <span v-else>\r\n          {{ headerRow.label }}\r\n        </span>\r\n      </slot>\r\n    </span>\r\n  </th>\r\n  <!-- if the mode is not span, we display every column -->\r\n  <th\r\n    class=\"vgt-row-header\"\r\n    v-if=\"headerRow.mode !== 'span' && lineNumbers\"></th>\r\n  <th\r\n    class=\"vgt-row-header\"\r\n    v-if=\"headerRow.mode !== 'span' && selectable\">\r\n    <template v-if=\"selectAllByGroup\"\r\n    >\r\n      <slot name=\"table-header-group-select\"\r\n        :columns=\"columns\"\r\n        :row=\"headerRow\"\r\n      >\r\n        <input\r\n          type=\"checkbox\"\r\n          :checked=\"allSelected\"\r\n          @change=\"toggleSelectGroup($event)\" />\r\n      </slot>\r\n    </template>\r\n  </th>\r\n  <th\r\n    v-if=\"headerRow.mode !== 'span' && !column.hidden\"\r\n    v-for=\"(column, i) in columns\"\r\n    :key=\"i\"\r\n    class=\"vgt-row-header\"\r\n    :class=\"getClasses(i, 'td')\"\r\n    @click=\"columnCollapsable(i) ? $emit('vgtExpand', !headerRow.vgtIsExpanded) : () => {}\">\r\n    <span v-if=\"columnCollapsable(i)\" class=\"triangle\" :class=\"{ 'expand': headerRow.vgtIsExpanded }\"></span>\r\n    <slot\r\n      :row=\"headerRow\"\r\n      :column=\"column\"\r\n      :formattedRow=\"formattedRow(headerRow, true)\"\r\n      name=\"table-header-row\">\r\n      <span v-if=\"!column.html\">\r\n        {{ collectFormatted(headerRow, column, true) }}\r\n      </span>\r\n      <span v-if=\"column.html\" v-html=\"collectFormatted(headerRow, column, true)\">\r\n      </span>\r\n    </slot>\r\n  </th>\r\n</tr>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: 'VgtHeaderRow',\r\n  props: {\r\n    headerRow: {\r\n      type: Object,\r\n    },\r\n    columns: {\r\n      type: Array,\r\n    },\r\n    lineNumbers: {\r\n      type: Boolean,\r\n    },\r\n    selectable: {\r\n      type: Boolean,\r\n    },\r\n    selectAllByGroup: {\r\n      type: Boolean\r\n    },\r\n    collapsable: {\r\n      type: [Boolean, Number],\r\n      default: false,\r\n    },\r\n    collectFormatted: {\r\n      type: Function,\r\n    },\r\n    formattedRow: {\r\n      type: Function,\r\n    },\r\n    getClasses: {\r\n      type: Function,\r\n    },\r\n    fullColspan: {\r\n      type: Number,\r\n    },\r\n    groupIndex: {\r\n      type: Number\r\n    },\r\n  },\r\n  data() {\r\n    return {\r\n    };\r\n  },\r\n  computed: {\r\n    allSelected() {\r\n      const { headerRow, groupChildObject } = this;\r\n      return headerRow.children.filter((row) => row.vgtSelected).length === headerRow.children.length;\r\n    }\r\n  },\r\n  methods: {\r\n    columnCollapsable(currentIndex) {\r\n      if (this.collapsable === true) {\r\n        return currentIndex === 0;\r\n      }\r\n      return currentIndex === this.collapsable;\r\n    },\r\n    toggleSelectGroup(event) {\r\n      this.$emit('on-select-group-change', {\r\n        groupIndex: this.groupIndex, checked: event.target.checked\r\n      });\r\n    }\r\n  },\r\n\r\n  mounted() {\r\n  },\r\n  components: {\r\n  },\r\n};\r\n</script>\r\n\r\n<style lang=\"scss\">\r\n\r\n</style>\r\n","import { format, parse, isValid, compareAsc } from 'date-fns';\r\nimport def from './default';\r\n\r\nconst date = Object.assign({}, def);\r\n\r\ndate.isRight = true;\r\n\r\ndate.compare = function (x, y, column) {\r\n  function cook(d) {\r\n    if (column && column.dateInputFormat) {\r\n      return parse(`${d}`, `${column.dateInputFormat}`, new Date());\r\n    }\r\n    return d;\r\n  }\r\n  x = cook(x);\r\n  y = cook(y);\r\n  if (!isValid(x)) {\r\n    return -1;\r\n  }\r\n  if (!isValid(y)) {\r\n    return 1;\r\n  }\r\n  return compareAsc(x, y);\r\n};\r\n\r\ndate.format = function (v, column) {\r\n  if (v === undefined || v === null) return '';\r\n  // convert to date\r\n  const date = parse(v, column.dateInputFormat, new Date());\r\n  if (isValid(date)) {\r\n    return format(date, column.dateOutputFormat);\r\n  }\r\n  console.error(`Not a valid date: \"${v}\"`);\r\n  return null;\r\n};\r\n\r\nexport default date;\r\n","import def from './default';\r\n\r\nconst number = Object.assign({}, def);\r\n\r\nnumber.isRight = true;\r\n\r\nnumber.filterPredicate = function (rowval, filter) {\r\n  return number.compare(rowval, filter) === 0;\r\n};\r\n\r\n\r\nnumber.compare = function (x, y) {\r\n  function cook(d) {\r\n    // if d is null or undefined we give it the smallest\r\n    // possible value\r\n    if (d === undefined || d === null) return -Infinity;\r\n    return d.indexOf('.') >= 0 ? parseFloat(d) : parseInt(d, 10);\r\n  }\r\n\r\n  x = typeof x === 'number' ? x : cook(x);\r\n  y = typeof y === 'number' ? y : cook(y);\r\n  if (x < y) return -1;\r\n  if (x > y) return 1;\r\n  return 0;\r\n};\r\n\r\nexport default number;\r\n","import number from './number';\r\n\r\nconst decimal = Object.assign({}, number);\r\n\r\ndecimal.format = function (v) {\r\n  if (v === undefined || v === null) return '';\r\n  return parseFloat(Math.round(v * 100) / 100).toFixed(2);\r\n};\r\n\r\nexport default decimal;\r\n","import number from './number';\r\n\r\nconst percentage = Object.assign({}, number);\r\n\r\npercentage.format = function (v) {\r\n  if (v === undefined || v === null) return '';\r\n  return `${parseFloat(v * 100).toFixed(2)}%`;\r\n};\r\n\r\nexport default percentage;\r\n","import def from './default';\r\n\r\nconst boolean = Object.assign({}, def);\r\n\r\nboolean.isRight = true;\r\n\r\nboolean.filterPredicate = function (rowval, filter) {\r\n  return boolean.compare(rowval, filter) === 0;\r\n};\r\n\r\n\r\nboolean.compare = function (x, y) {\r\n  function cook(d) {\r\n    if (typeof d === 'boolean') return d ? 1 : 0;\r\n    if (typeof d === 'string') return d === 'true' ? 1 : 0;\r\n    return -Infinity;\r\n  }\r\n\r\n  x = cook(x);\r\n  y = cook(y);\r\n  if (x < y) return -1;\r\n  if (x > y) return 1;\r\n  return 0;\r\n};\r\n\r\nexport default boolean;\r\n","<template>\r\n  <div\r\n    :class=\"wrapStyleClasses\">\r\n    <div v-if=\"isLoading\" class=\"vgt-loading vgt-center-align\">\r\n      <slot name=\"loadingContent\">\r\n        <span class=\"vgt-loading__content\">\r\n          Loading...\r\n        </span>\r\n      </slot>\r\n    </div>\r\n    <div class=\"vgt-inner-wrap\"\r\n      :class=\"{'is-loading': isLoading}\">\r\n      <slot\r\n        v-if=\"paginate && paginateOnTop\"\r\n        name=\"pagination-top\"\r\n        :pageChanged=\"pageChanged\"\r\n        :perPageChanged=\"perPageChanged\"\r\n        :total=\"totalRows || totalRowCount\"\r\n      >\r\n        <vgt-pagination\r\n          ref=\"paginationTop\"\r\n          @page-changed=\"pageChanged\"\r\n          @per-page-changed=\"perPageChanged\"\r\n          :perPage=\"perPage\"\r\n          :rtl=\"rtl\"\r\n          :total=\"totalRows || totalRowCount\"\r\n          :mode=\"paginationMode\"\r\n          :jumpFirstOrLast=\"paginationOptions.jumpFirstOrLast\"\r\n          :firstText=\"firstText\"\r\n          :lastText=\"lastText\"\r\n          :nextText=\"nextText\"\r\n          :prevText=\"prevText\"\r\n          :rowsPerPageText=\"rowsPerPageText\"\r\n          :perPageDropdownEnabled=\"paginationOptions.perPageDropdownEnabled\"\r\n          :customRowsPerPageDropdown=\"customRowsPerPageDropdown\"\r\n          :paginateDropdownAllowAll=\"paginateDropdownAllowAll\"\r\n          :ofText=\"ofText\"\r\n          :pageText=\"pageText\"\r\n          :allText=\"allText\"\r\n          :info-fn=\"paginationInfoFn\"\r\n        ></vgt-pagination>\r\n      </slot>\r\n      <vgt-global-search\r\n        @on-keyup=\"searchTableOnKeyUp\"\r\n        @on-enter=\"searchTableOnEnter\"\r\n        v-model=\"globalSearchTerm\"\r\n        :search-enabled=\"searchEnabled && externalSearchQuery == null\"\r\n        :global-search-placeholder=\"searchPlaceholder\"\r\n      >\r\n        <template slot=\"internal-table-actions\">\r\n          <slot name=\"table-actions\">\r\n          </slot>\r\n        </template>\r\n      </vgt-global-search>\r\n      <div\r\n        v-if=\"selectedRowCount && !disableSelectInfo\"\r\n        class=\"vgt-selection-info-row clearfix\"\r\n        :class=\"selectionInfoClass\"\r\n      >\r\n        {{selectionInfo}}\r\n        <a\r\n          href=\"\"\r\n          @click.prevent=\"unselectAllInternal(true)\"\r\n        >\r\n          {{clearSelectionText}}\r\n        </a>\r\n        <div class=\"vgt-selection-info-row__actions vgt-pull-right\">\r\n          <slot name=\"selected-row-actions\">\r\n          </slot>\r\n        </div>\r\n      </div>\r\n      <div class=\"vgt-fixed-header\">\r\n        <table\r\n          id=\"vgt-table\"\r\n          v-if=\"fixedHeader\"\r\n          :class=\"tableStyleClasses\"\r\n        >\r\n        <colgroup>\r\n          <col v-for=\"(column, index) in columns\" :key=\"index\" :id=\"`col-${index}`\">\r\n        </colgroup>\r\n          <!-- Table header -->\r\n          <thead\r\n            is=\"vgt-table-header\"\r\n            ref=\"table-header-secondary\"\r\n            @on-toggle-select-all=\"toggleSelectAll\"\r\n            @on-sort-change=\"changeSort\"\r\n            @filter-changed=\"filterRows\"\r\n            :columns=\"columns\"\r\n            :line-numbers=\"lineNumbers\"\r\n            :selectable=\"selectable\"\r\n            :all-selected=\"allSelected\"\r\n            :all-selected-indeterminate=\"allSelectedIndeterminate\"\r\n            :mode=\"mode\"\r\n            :sortable=\"sortable\"\r\n            :multiple-column-sort=\"multipleColumnSort\"\r\n            :typed-columns=\"typedColumns\"\r\n            :getClasses=\"getClasses\"\r\n            :searchEnabled=\"searchEnabled\"\r\n            :paginated=\"paginated\"\r\n            :table-ref=\"$refs.table\"\r\n          >\r\n            <template v-if=\"!fixedHeader\">\r\n              <template\r\n                slot=\"table-column\"\r\n                slot-scope=\"props\"\r\n              >\r\n                <slot\r\n                  name=\"table-column\"\r\n                  :column=\"props.column\"\r\n                >\r\n                  <span>{{props.column.label}}</span>\r\n                </slot>\r\n              </template>\r\n              <template\r\n                  slot=\"column-filter\"\r\n                  slot-scope=\"props\"\r\n              >\r\n                <slot\r\n                    name=\"column-filter\"\r\n                    :column=\"props.column\"\r\n                    :updateFilters=\"props.updateFilters\"\r\n                ></slot>\r\n              </template>\r\n            </template>\r\n            <th v-else ></th>\r\n          </thead>\r\n        </table>\r\n      </div>\r\n      <div\r\n        :class=\"{'vgt-responsive': responsive}\"\r\n        :style=\"wrapperStyles\"\r\n      >\r\n        <table\r\n          id=\"vgt-table\"\r\n          ref=\"table\"\r\n          :class=\"tableStyles\"\r\n        >\r\n        <colgroup>\r\n          <col v-for=\"(column, index) in columns\" :key=\"index\" :id=\"`col-${index}`\">\r\n        </colgroup>\r\n          <!-- Table header -->\r\n          <thead\r\n            is=\"vgt-table-header\"\r\n            ref=\"table-header-primary\"\r\n            @on-toggle-select-all=\"toggleSelectAll\"\r\n            @on-sort-change=\"changeSort\"\r\n            @filter-changed=\"filterRows\"\r\n            :columns=\"columns\"\r\n            :line-numbers=\"lineNumbers\"\r\n            :selectable=\"selectable\"\r\n            :all-selected=\"allSelected\"\r\n            :all-selected-indeterminate=\"allSelectedIndeterminate\"\r\n            :mode=\"mode\"\r\n            :sortable=\"sortable\"\r\n            :multiple-column-sort=\"multipleColumnSort\"\r\n            :typed-columns=\"typedColumns\"\r\n            :getClasses=\"getClasses\"\r\n            :searchEnabled=\"searchEnabled\"\r\n          >\r\n            <template\r\n              slot=\"table-column\"\r\n              slot-scope=\"props\"\r\n            >\r\n              <slot\r\n                name=\"table-column\"\r\n                :column=\"props.column\"\r\n              >\r\n                <span>{{props.column.label}}</span>\r\n              </slot>\r\n            </template>\r\n            <template\r\n              slot=\"column-filter\"\r\n              slot-scope=\"props\"\r\n            >\r\n              <slot\r\n                name=\"column-filter\"\r\n                :column=\"props.column\"\r\n                :updateFilters=\"props.updateFilters\"\r\n              ></slot>\r\n            </template>\r\n          </thead>\r\n\r\n          <!-- Table body starts here -->\r\n          <tbody\r\n            v-for=\"(headerRow, hIndex) in paginated\"\r\n            :key=\"hIndex\"\r\n          >\r\n            <!-- if group row header is at the top -->\r\n            <vgt-header-row\r\n              v-if=\"groupHeaderOnTop\"\r\n              @vgtExpand=\"toggleExpand(headerRow[rowKeyField])\"\r\n              :header-row=\"headerRow\"\r\n              :columns=\"columns\"\r\n              :line-numbers=\"lineNumbers\"\r\n              :selectable=\"selectable\"\r\n              :select-all-by-group=\"selectAllByGroup\"\r\n              :collapsable=\"groupOptions.collapsable\"\r\n              :collect-formatted=\"collectFormatted\"\r\n              :formatted-row=\"formattedRow\"\r\n              :class=\"getRowStyleClass(headerRow)\"\r\n              :get-classes=\"getClasses\"\r\n              :full-colspan=\"fullColspan\"\r\n              :groupIndex=\"hIndex\"\r\n              @on-select-group-change=\"toggleSelectGroup($event, headerRow)\"\r\n            >\r\n              <template\r\n                v-if=\"hasHeaderRowTemplate\"\r\n                slot=\"table-header-row\"\r\n                slot-scope=\"props\"\r\n              >\r\n                <slot\r\n                  name=\"table-header-row\"\r\n                  :column=\"props.column\"\r\n                  :formattedRow=\"props.formattedRow\"\r\n                  :row=\"props.row\"\r\n                >\r\n                </slot>\r\n              </template>\r\n            </vgt-header-row>\r\n            <!-- normal rows here. we loop over all rows -->\r\n            <tr\r\n              v-if=\"groupOptions.collapsable ? headerRow.vgtIsExpanded : true\"\r\n              v-for=\"(row, index) in headerRow.children\"\r\n              :key=\"row.originalIndex\"\r\n              :class=\"getRowStyleClass(row)\"\r\n              @mouseenter=\"onMouseenter(row, index)\"\r\n              @mouseleave=\"onMouseleave(row, index)\"\r\n              @dblclick=\"onRowDoubleClicked(row, index, $event)\"\r\n              @click=\"onRowClicked(row, index, $event)\"\r\n              @auxclick=\"onRowAuxClicked(row, index, $event)\">\r\n              <th\r\n                v-if=\"lineNumbers\"\r\n                class=\"line-numbers\"\r\n              >\r\n                {{ getCurrentIndex(row.originalIndex) }}\r\n              </th>\r\n              <th\r\n                v-if=\"selectable\"\r\n                @click.stop=\"onCheckboxClicked(row, index, $event)\"\r\n                class=\"vgt-checkbox-col\"\r\n              >\r\n                <input\r\n                  type=\"checkbox\"\r\n                  :disabled=\"row.vgtDisabled\"\r\n                  :checked=\"row.vgtSelected\"\r\n                />\r\n              </th>\r\n              <td\r\n                @click=\"onCellClicked(row, column, index, $event)\"\r\n                v-for=\"(column, i) in columns\"\r\n                :key=\"i\"\r\n                :class=\"getClasses(i, 'td', row)\"\r\n                v-if=\"!column.hidden && column.field\"\r\n                v-bind:data-label=\"compactMode ? column.label : undefined\"\r\n              >\r\n                <slot\r\n                  name=\"table-row\"\r\n                  :row=\"row\"\r\n                  :column=\"column\"\r\n                  :formattedRow=\"formattedRow(row)\"\r\n                  :index=\"index\"\r\n                >\r\n                  <span v-if=\"!column.html\">\r\n                    {{ collectFormatted(row, column) }}\r\n                  </span>\r\n                  <span v-else v-html=\"collect(row, column.field)\">\r\n                  </span>\r\n                </slot>\r\n              </td>\r\n            </tr>\r\n            <!-- if group row header is at the bottom -->\r\n            <vgt-header-row\r\n              v-if=\"groupHeaderOnBottom\"\r\n              :header-row=\"headerRow\"\r\n              :columns=\"columns\"\r\n              :line-numbers=\"lineNumbers\"\r\n              :selectable=\"selectable\"\r\n              :select-all-by-group=\"selectAllByGroup\"\r\n              :collect-formatted=\"collectFormatted\"\r\n              :formatted-row=\"formattedRow\"\r\n              :get-classes=\"getClasses\"\r\n              :full-colspan=\"fullColspan\"\r\n              :groupIndex=\"index\"\r\n              @on-select-group-change=\"toggleSelectGroup($event, headerRow)\"\r\n            >\r\n              <template\r\n                v-if=\"hasHeaderRowTemplate\"\r\n                slot=\"table-header-row\"\r\n                slot-scope=\"props\"\r\n              >\r\n                <slot\r\n                  name=\"table-header-row\"\r\n                  :column=\"props.column\"\r\n                  :formattedRow=\"props.formattedRow\"\r\n                  :row=\"props.row\"\r\n                >\r\n                </slot>\r\n              </template>\r\n            </vgt-header-row>\r\n          </tbody>\r\n\r\n          <tbody v-if=\"showEmptySlot\">\r\n            <tr>\r\n              <td :colspan=\"fullColspan\">\r\n                <slot name=\"emptystate\">\r\n                  <div class=\"vgt-center-align vgt-text-disabled\">\r\n                    No data for table\r\n                  </div>\r\n                </slot>\r\n              </td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n      <div v-if=\"hasFooterSlot\" class=\"vgt-wrap__actions-footer\">\r\n        <slot name=\"table-actions-bottom\">\r\n        </slot>\r\n      </div>\r\n      <slot\r\n        v-if=\"paginate && paginateOnBottom\"\r\n        name=\"pagination-bottom\"\r\n        :pageChanged=\"pageChanged\"\r\n        :perPageChanged=\"perPageChanged\"\r\n        :total=\"totalRows || totalRowCount\"\r\n      >\r\n        <vgt-pagination\r\n          ref=\"paginationBottom\"\r\n          @page-changed=\"pageChanged\"\r\n          @per-page-changed=\"perPageChanged\"\r\n          :perPage=\"perPage\"\r\n          :rtl=\"rtl\"\r\n          :total=\"totalRows || totalRowCount\"\r\n          :mode=\"paginationMode\"\r\n          :jumpFirstOrLast=\"paginationOptions.jumpFirstOrLast\"\r\n          :firstText=\"firstText\"\r\n          :lastText=\"lastText\"\r\n          :nextText=\"nextText\"\r\n          :prevText=\"prevText\"\r\n          :rowsPerPageText=\"rowsPerPageText\"\r\n          :perPageDropdownEnabled=\"paginationOptions.perPageDropdownEnabled\"\r\n          :customRowsPerPageDropdown=\"customRowsPerPageDropdown\"\r\n          :paginateDropdownAllowAll=\"paginateDropdownAllowAll\"\r\n          :ofText=\"ofText\"\r\n          :pageText=\"pageText\"\r\n          :allText=\"allText\"\r\n          :info-fn=\"paginationInfoFn\"\r\n        ></vgt-pagination>\r\n      </slot>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport {\r\n  DEFAULT_SORT_TYPE,\r\n  SORT_TYPES,\r\n} from './utils/constants';\r\nimport isEqual from 'lodash.isequal';\r\nimport defaultType from './types/default';\r\nimport VgtPagination from './pagination/VgtPagination.vue';\r\nimport VgtGlobalSearch from './VgtGlobalSearch.vue';\r\nimport VgtTableHeader from './VgtTableHeader.vue';\r\nimport VgtHeaderRow from './VgtHeaderRow.vue';\r\n\r\n// here we load each data type module.\r\nimport * as CoreDataTypes from './types/index';\r\n\r\nconst dataTypes = {};\r\nconst coreDataTypes = CoreDataTypes.default;\r\nObject.keys(coreDataTypes).forEach((key) => {\r\n  const compName = key.replace(/^\\.\\//, '').replace(/\\.js/, '');\r\n  dataTypes[compName] = coreDataTypes[key].default;\r\n});\r\n\r\nexport default {\r\n  name: 'vue-good-table',\r\n  props: {\r\n    isLoading: { default: null, type: Boolean },\r\n    maxHeight: { default: null, type: String },\r\n    fixedHeader: Boolean ,\r\n    theme: { default: '' },\r\n    mode: { default: 'local' }, // could be remote\r\n    totalRows: {}, // required if mode = 'remote'\r\n    styleClass: { default: 'vgt-table bordered' },\r\n    columns: {},\r\n    rows: {},\r\n    lineNumbers: Boolean,\r\n    responsive: { default: true , type: Boolean },\r\n    rtl: Boolean,\r\n    rowStyleClass: { default: null, type: [Function, String] },\r\n    compactMode: Boolean,\r\n\r\n    groupOptions: {\r\n      default() {\r\n        return {\r\n          enabled: false,\r\n          collapsable: false,\r\n          rowKey: null\r\n        };\r\n      },\r\n    },\r\n\r\n    selectOptions: {\r\n      default() {\r\n        return {\r\n          enabled: false,\r\n          selectionInfoClass: '',\r\n          selectionText: 'rows selected',\r\n          clearSelectionText: 'clear',\r\n          disableSelectInfo: false,\r\n          selectAllByGroup: false,\r\n        };\r\n      },\r\n    },\r\n\r\n    // sort\r\n    sortOptions: {\r\n      default() {\r\n        return {\r\n          enabled: true,\r\n          multipleColumns: true,\r\n          initialSortBy: {},\r\n        };\r\n      },\r\n    },\r\n\r\n    // pagination\r\n    paginationOptions: {\r\n      default() {\r\n        return {\r\n          enabled: false,\r\n          position: 'bottom',\r\n          perPage: 10,\r\n          perPageDropdown: null,\r\n          perPageDropdownEnabled: true,\r\n          position: 'bottom',\r\n          dropdownAllowAll: true,\r\n          mode: 'records', // or pages\r\n          infoFn: null,\r\n          jumpFirstOrLast : false\r\n        };\r\n      },\r\n    },\r\n\r\n    searchOptions: {\r\n      default() {\r\n        return {\r\n          enabled: false,\r\n          trigger: null,\r\n          externalQuery: null,\r\n          searchFn: null,\r\n          placeholder: 'Search Table',\r\n        };\r\n      },\r\n    },\r\n  },\r\n\r\n  data: () => ({\r\n    // loading state for remote mode\r\n    tableLoading: false,\r\n\r\n    // text options\r\n    firstText: \"First\",\r\n    lastText: \"Last\",\r\n    nextText: 'Next',\r\n    prevText: 'Previous',\r\n    rowsPerPageText: 'Rows per page',\r\n    ofText: 'of',\r\n    allText: 'All',\r\n    pageText: 'page',\r\n\r\n    // internal select options\r\n    selectable: false,\r\n    selectOnCheckboxOnly: false,\r\n    selectAllByPage: true,\r\n    disableSelectInfo: false,\r\n    selectionInfoClass: '',\r\n    selectionText: 'rows selected',\r\n    clearSelectionText: 'clear',\r\n\r\n    // keys for rows that are currently expanded\r\n    maintainExpanded: true,\r\n    expandedRowKeys: new Set(),\r\n\r\n    // internal sort options\r\n    sortable: true,\r\n    defaultSortBy: null,\r\n    multipleColumnSort: true,\r\n\r\n    // internal search options\r\n    searchEnabled: false,\r\n    searchTrigger: null,\r\n    externalSearchQuery: null,\r\n    searchFn: null,\r\n    searchPlaceholder: 'Search Table',\r\n    searchSkipDiacritics: false,\r\n\r\n    // internal pagination options\r\n    perPage: null,\r\n    paginate: false,\r\n    paginateOnTop: false,\r\n    paginateOnBottom: true,\r\n    customRowsPerPageDropdown: [],\r\n    paginateDropdownAllowAll: true,\r\n    paginationMode: 'records',\r\n    paginationInfoFn: null,\r\n\r\n    currentPage: 1,\r\n    currentPerPage: 10,\r\n    sorts: [],\r\n    globalSearchTerm: '',\r\n    filteredRows: [],\r\n    columnFilters: {},\r\n    forceSearch: false,\r\n    sortChanged: false,\r\n    dataTypes: dataTypes || {},\r\n  }),\r\n\r\n  watch: {\r\n    rows: {\r\n      handler() {\r\n        this.$emit('update:isLoading', false);\r\n        this.filterRows(this.columnFilters, false);\r\n      },\r\n      deep: true,\r\n      immediate: true,\r\n    },\r\n\r\n    selectOptions: {\r\n      handler() {\r\n        this.initializeSelect();\r\n      },\r\n      deep: true,\r\n      immediate: true,\r\n    },\r\n\r\n    paginationOptions: {\r\n      handler(newValue, oldValue) {\r\n        if (!isEqual(newValue, oldValue)) {\r\n          this.initializePagination();\r\n        }\r\n      },\r\n      deep: true,\r\n      immediate: true,\r\n    },\r\n\r\n    searchOptions: {\r\n      handler() {\r\n        if (\r\n          this.searchOptions.externalQuery !== undefined &&\r\n          this.searchOptions.externalQuery !== this.searchTerm\r\n        ) {\r\n          //* we need to set searchTerm to externalQuery first.\r\n          this.externalSearchQuery = this.searchOptions.externalQuery;\r\n          this.handleSearch();\r\n        }\r\n        this.initializeSearch();\r\n      },\r\n      deep: true,\r\n      immediate: true,\r\n    },\r\n\r\n    sortOptions: {\r\n      handler(newValue, oldValue) {\r\n        if (!isEqual(newValue, oldValue)) {\r\n          this.initializeSort();\r\n        }\r\n      },\r\n      deep: true,\r\n    },\r\n\r\n    selectedRows(newValue, oldValue) {\r\n      if (!isEqual(newValue, oldValue)) {\r\n        this.$emit('on-selected-rows-change', {\r\n          selectedRows: this.selectedRows,\r\n        });\r\n      }\r\n    },\r\n  },\r\n\r\n  computed: {\r\n    tableStyles() {\r\n      if (this.compactMode)\r\n        return this.tableStyleClasses + 'vgt-compact'\r\n      else\r\n        return this.tableStyleClasses\r\n    },\r\n    hasFooterSlot() {\r\n      return !!this.$slots['table-actions-bottom'];\r\n    },\r\n    wrapperStyles() {\r\n      return {\r\n        overflow: 'scroll-y',\r\n        maxHeight: this.maxHeight ? this.maxHeight : 'auto',\r\n      };\r\n    },\r\n\r\n    rowKeyField() {\r\n      return this.groupOptions.rowKey || 'vgt_header_id';\r\n    },\r\n\r\n    hasHeaderRowTemplate() {\r\n      return (\r\n        !!this.$slots['table-header-row'] ||\r\n        !!this.$scopedSlots['table-header-row']\r\n      );\r\n    },\r\n\r\n    showEmptySlot() {\r\n      if (!this.paginated.length) return true;\r\n\r\n      if (\r\n        this.paginated[0].label === 'no groups' &&\r\n        !this.paginated[0].children.length\r\n      ) {\r\n        return true;\r\n      }\r\n\r\n      return false;\r\n    },\r\n\r\n    allSelected() {\r\n      return (\r\n        this.selectedRowCount > 0 &&\r\n        ((this.selectAllByPage &&\r\n          this.selectedPageRowsCount === this.totalPageRowCount) ||\r\n          (!this.selectAllByPage &&\r\n            this.selectedRowCount === this.totalRowCount))\r\n      );\r\n    },\r\n\r\n    allSelectedIndeterminate() {\r\n      return (\r\n        !this.allSelected &&\r\n        ((this.selectAllByPage && this.selectedPageRowsCount > 0) ||\r\n          (!this.selectAllByPage && this.selectedRowCount > 0))\r\n      );\r\n    },\r\n\r\n    selectionInfo() {\r\n      return `${this.selectedRowCount} ${this.selectionText}`;\r\n    },\r\n\r\n    selectedRowCount() {\r\n      return this.selectedRows.length;\r\n    },\r\n\r\n    selectedPageRowsCount() {\r\n      return this.selectedPageRows.length;\r\n    },\r\n\r\n    selectedPageRows() {\r\n      const selectedRows = [];\r\n      this.paginated.forEach((headerRow) => {\r\n        headerRow.children.forEach((row) => {\r\n          if (row.vgtSelected) {\r\n            selectedRows.push(row);\r\n          }\r\n        });\r\n      });\r\n      return selectedRows;\r\n    },\r\n\r\n    selectedRows() {\r\n      const selectedRows = [];\r\n      this.processedRows.forEach((headerRow) => {\r\n        headerRow.children.forEach((row) => {\r\n          if (row.vgtSelected) {\r\n            selectedRows.push(row);\r\n          }\r\n        });\r\n      });\r\n      return selectedRows.sort((r1, r2) => r1.originalIndex - r2.originalIndex);\r\n    },\r\n\r\n    fullColspan() {\r\n      let fullColspan = 0;\r\n      for (let i = 0; i < this.columns.length; i += 1) {\r\n        if (!this.columns[i].hidden) {\r\n          fullColspan += 1;\r\n        }\r\n      }\r\n      if (this.lineNumbers) fullColspan++;\r\n      if (this.selectable) fullColspan++;\r\n      return fullColspan;\r\n    },\r\n    groupHeaderOnTop() {\r\n      if (\r\n        this.groupOptions &&\r\n        this.groupOptions.enabled &&\r\n        this.groupOptions.headerPosition &&\r\n        this.groupOptions.headerPosition === 'bottom'\r\n      ) {\r\n        return false;\r\n      }\r\n      if (this.groupOptions && this.groupOptions.enabled) return true;\r\n\r\n      // will only get here if groupOptions is false\r\n      return false;\r\n    },\r\n    groupHeaderOnBottom() {\r\n      if (\r\n        this.groupOptions &&\r\n        this.groupOptions.enabled &&\r\n        this.groupOptions.headerPosition &&\r\n        this.groupOptions.headerPosition === 'bottom'\r\n      ) {\r\n        return true;\r\n      }\r\n      return false;\r\n    },\r\n    totalRowCount() {\r\n      const total = this.processedRows.reduce((total, headerRow) => {\r\n        const childrenCount = headerRow.children ? headerRow.children.length : 0;\r\n        return total + childrenCount;\r\n      }, 0);\r\n      return total;\r\n    },\r\n    totalPageRowCount() {\r\n      const total = this.paginated.reduce((total, headerRow) => {\r\n        const childrenCount = headerRow.children ? headerRow.children.length : 0;\r\n        return total + childrenCount;\r\n      }, 0);\r\n      return total;\r\n    },\r\n    wrapStyleClasses() {\r\n      let classes = 'vgt-wrap';\r\n      if (this.rtl) classes += ' rtl';\r\n      classes += ` ${this.theme}`;\r\n      return classes;\r\n    },\r\n    tableStyleClasses() {\r\n      let classes = this.styleClass;\r\n      classes += ` ${this.theme}`;\r\n      return classes;\r\n    },\r\n\r\n    searchTerm() {\r\n      return this.externalSearchQuery != null\r\n        ? this.externalSearchQuery\r\n        : this.globalSearchTerm;\r\n    },\r\n\r\n    //\r\n    globalSearchAllowed() {\r\n      if (\r\n        this.searchEnabled &&\r\n        !!this.globalSearchTerm &&\r\n        this.searchTrigger !== 'enter'\r\n      ) {\r\n        return true;\r\n      }\r\n\r\n      if (this.externalSearchQuery != null && this.searchTrigger !== 'enter') {\r\n        return true;\r\n      }\r\n\r\n      if (this.forceSearch) {\r\n        this.forceSearch = false;\r\n        return true;\r\n      }\r\n\r\n      return false;\r\n    },\r\n\r\n    // this is done everytime sortColumn\r\n    // or sort type changes\r\n    //----------------------------------------\r\n    processedRows() {\r\n      // we only process rows when mode is local\r\n      let computedRows = this.filteredRows;\r\n      if (this.mode === 'remote') {\r\n        return computedRows;\r\n      }\r\n\r\n      // take care of the global filter here also\r\n      if (this.globalSearchAllowed) {\r\n        // here also we need to de-construct and then\r\n        // re-construct the rows.\r\n        const allRows = [];\r\n        this.filteredRows.forEach((headerRow) => {\r\n          allRows.push(...headerRow.children);\r\n        });\r\n        const filteredRows = [];\r\n        allRows.forEach((row) => {\r\n          for (let i = 0; i < this.columns.length; i += 1) {\r\n            const col = this.columns[i];\r\n            // if col does not have search disabled,\r\n            if (!col.globalSearchDisabled) {\r\n              // if a search function is provided,\r\n              // use that for searching, otherwise,\r\n              // use the default search behavior\r\n              if (this.searchFn) {\r\n                const foundMatch = this.searchFn(\r\n                  row,\r\n                  col,\r\n                  this.collectFormatted(row, col),\r\n                  this.searchTerm\r\n                );\r\n                if (foundMatch) {\r\n                  filteredRows.push(row);\r\n                  break; // break the loop\r\n                }\r\n              } else {\r\n                // comparison\r\n                const matched = defaultType.filterPredicate(\r\n                  this.collectFormatted(row, col),\r\n                  this.searchTerm,\r\n                  this.searchSkipDiacritics\r\n                );\r\n                if (matched) {\r\n                  filteredRows.push(row);\r\n                  break; // break loop\r\n                }\r\n              }\r\n            }\r\n          }\r\n        });\r\n\r\n        // this is where we emit on search\r\n        this.$emit('on-search', {\r\n          searchTerm: this.searchTerm,\r\n          rowCount: filteredRows.length,\r\n        });\r\n\r\n        // here we need to reconstruct the nested structure\r\n        // of rows\r\n        computedRows = [];\r\n        this.filteredRows.forEach((headerRow) => {\r\n          const i = headerRow.vgt_header_id;\r\n          const children = filteredRows.filter((r) => r.vgt_id === i);\r\n          if (children.length) {\r\n            const newHeaderRow = JSON.parse(JSON.stringify(headerRow));\r\n            newHeaderRow.children = children;\r\n            computedRows.push(newHeaderRow);\r\n          }\r\n        });\r\n      }\r\n      if (this.sorts.length) {\r\n        //* we need to sort\r\n        computedRows.forEach((cRows) => {\r\n          cRows.children.sort((xRow, yRow) => {\r\n            //* we need to get column for each sort\r\n            let sortValue;\r\n            for (let i = 0; i < this.sorts.length; i += 1) {\r\n              const srt = this.sorts[i];\r\n\r\n              if (srt.type === SORT_TYPES.None) {\r\n                //* if no sort, we need to use the original index to sort.\r\n                sortValue = sortValue || (xRow.originalIndex - yRow.originalIndex);\r\n              } else{\r\n                const column = this.getColumnForField(srt.field);\r\n                const xvalue = this.collect(xRow, srt.field);\r\n                const yvalue = this.collect(yRow, srt.field);\r\n  \r\n                //* if a custom sort function has been provided we use that\r\n                const { sortFn } = column;\r\n                if (sortFn && typeof sortFn === 'function') {\r\n                  sortValue =\r\n                    sortValue ||\r\n                    sortFn(xvalue, yvalue, column, xRow, yRow) *\r\n                      (srt.type === SORT_TYPES.Descending ? -1 : 1);\r\n                } else {\r\n                  //* else we use our own sort\r\n                  sortValue =\r\n                    sortValue ||\r\n                    column.typeDef.compare(xvalue, yvalue, column) *\r\n                      (srt.type === SORT_TYPES.Descending ? -1 : 1);\r\n                }\r\n              }\r\n            }\r\n            return sortValue;\r\n          });\r\n        });\r\n      }\r\n\r\n      // if the filtering is event based, we need to maintain filter\r\n      // rows\r\n      if (this.searchTrigger === 'enter') {\r\n        this.filteredRows = computedRows;\r\n      }\r\n\r\n      return computedRows;\r\n    },\r\n\r\n    paginated() {\r\n      if (!this.processedRows.length) return [];\r\n\r\n      if (this.mode === 'remote') {\r\n        return this.processedRows;\r\n      }\r\n\r\n      //* flatten the rows for paging.\r\n      let paginatedRows = [];\r\n      this.processedRows.forEach((childRows) => {\r\n        //* only add headers when group options are enabled.\r\n        if (this.groupOptions.enabled) {\r\n          paginatedRows.push(childRows);\r\n        }\r\n        paginatedRows.push(...childRows.children);\r\n      });\r\n\r\n      if (this.paginate) {\r\n        let pageStart = (this.currentPage - 1) * this.currentPerPage;\r\n\r\n        // in case of filtering we might be on a page that is\r\n        // not relevant anymore\r\n        // also, if setting to all, current page will not be valid\r\n        if (pageStart >= paginatedRows.length || this.currentPerPage === -1) {\r\n          this.currentPage = 1;\r\n          pageStart = 0;\r\n        }\r\n\r\n        // calculate page end now\r\n        let pageEnd = paginatedRows.length + 1;\r\n\r\n        // if the setting is not set to 'all'\r\n        if (this.currentPerPage !== -1) {\r\n          pageEnd = this.currentPage * this.currentPerPage;\r\n        }\r\n\r\n        paginatedRows = paginatedRows.slice(pageStart, pageEnd);\r\n      }\r\n      // reconstruct paginated rows here\r\n      const reconstructedRows = [];\r\n      paginatedRows.forEach((flatRow) => {\r\n        //* header row?\r\n        if (flatRow.vgt_header_id !== undefined) {\r\n          this.handleExpanded(flatRow);\r\n          const newHeaderRow = JSON.parse(JSON.stringify(flatRow));\r\n          newHeaderRow.children = [];\r\n          reconstructedRows.push(newHeaderRow);\r\n        } else {\r\n          //* child row\r\n          let hRow = reconstructedRows.find(r => r.vgt_header_id === flatRow.vgt_id);\r\n          if (!hRow) {\r\n            hRow = this.processedRows.find(r => r.vgt_header_id === flatRow.vgt_id);\r\n            if (hRow) {\r\n              hRow = JSON.parse(JSON.stringify(hRow));\r\n              hRow.children = [];\r\n              reconstructedRows.push(hRow);\r\n            }\r\n          }\r\n          hRow.children.push(flatRow);\r\n        }\r\n      });\r\n      return reconstructedRows;\r\n    },\r\n\r\n    originalRows() {\r\n      const rows = this.rows && this.rows.length ? JSON.parse(JSON.stringify(this.rows)) : [];\r\n      let nestedRows = [];\r\n      if (!this.groupOptions.enabled) {\r\n        nestedRows = this.handleGrouped([\r\n          {\r\n            label: 'no groups',\r\n            children: rows,\r\n          },\r\n        ]);\r\n      } else {\r\n        nestedRows = this.handleGrouped(rows);\r\n      }\r\n      // we need to preserve the original index of\r\n      // rows so lets do that\r\n      let index = 0;\r\n      nestedRows.forEach((headerRow) => {\r\n        headerRow.children.forEach((row) => {\r\n          row.originalIndex = index++;\r\n        });\r\n      });\r\n\r\n      return nestedRows;\r\n    },\r\n\r\n    typedColumns() {\r\n      const columns = this.columns;\r\n      for (let i = 0; i < this.columns.length; i++) {\r\n        const column = columns[i];\r\n        column.typeDef = this.dataTypes[column.type] || defaultType;\r\n      }\r\n      return columns;\r\n    },\r\n\r\n    hasRowClickListener() {\r\n      return this.$listeners && this.$listeners['on-row-click'];\r\n    },\r\n  },\r\n\r\n  methods: {\r\n    //* we need to check for expanded row state here\r\n    //* to maintain it when sorting/filtering\r\n    handleExpanded(headerRow) {\r\n      if (this.maintainExpanded &&\r\n        this.expandedRowKeys.has(headerRow[this.rowKeyField])) {\r\n        this.$set(headerRow, 'vgtIsExpanded', true);\r\n      } else {\r\n        this.$set(headerRow, 'vgtIsExpanded', false);\r\n      }\r\n    },\r\n    toggleExpand(id) {\r\n      const headerRow = this.filteredRows.find(r => r[this.rowKeyField] === id);\r\n      if (headerRow) {\r\n        this.$set(headerRow, 'vgtIsExpanded', !headerRow.vgtIsExpanded);\r\n      }\r\n      if (this.maintainExpanded\r\n        && headerRow.vgtIsExpanded) {\r\n        this.expandedRowKeys.add(headerRow[this.rowKeyField]);\r\n      } else {\r\n        this.expandedRowKeys.delete(headerRow[this.rowKeyField]);\r\n      }\r\n    },\r\n\r\n    expandAll() {\r\n      this.filteredRows.forEach((row) => {\r\n        this.$set(row, 'vgtIsExpanded', true);\r\n        if (this.maintainExpanded) {\r\n          this.expandedRowKeys.add(row[this.rowKeyField]);\r\n        }\r\n      });\r\n    },\r\n\r\n    collapseAll() {\r\n      this.filteredRows.forEach((row) => {\r\n        this.$set(row, 'vgtIsExpanded', false);\r\n        this.expandedRowKeys.clear();\r\n      });\r\n    },\r\n\r\n    getColumnForField(field) {\r\n      for (let i = 0; i < this.typedColumns.length; i += 1) {\r\n        if (this.typedColumns[i].field === field) return this.typedColumns[i];\r\n      }\r\n    },\r\n\r\n    handleSearch() {\r\n      this.resetTable();\r\n      // for remote mode, we need to emit on-search\r\n      if (this.mode === 'remote') {\r\n        this.$emit('on-search', {\r\n          searchTerm: this.searchTerm,\r\n        });\r\n      }\r\n    },\r\n\r\n    reset() {\r\n      this.initializeSort();\r\n      this.changePage(1);\r\n      this.$refs['table-header-primary'].reset(true);\r\n      if (this.$refs['table-header-secondary']) {\r\n        this.$refs['table-header-secondary'].reset(true);\r\n      }\r\n    },\r\n\r\n    emitSelectedRows() {\r\n      this.$emit('on-select-all', {\r\n        selected: this.selectedRowCount === this.totalRowCount,\r\n        selectedRows: this.selectedRows,\r\n      });\r\n    },\r\n\r\n    unselectAllInternal(forceAll) {\r\n      const rows =\r\n        this.selectAllByPage && !forceAll ? this.paginated : this.filteredRows;\r\n      rows.forEach((headerRow, i) => {\r\n        headerRow.children.forEach((row, j) => {\r\n          this.$set(row, 'vgtSelected', false);\r\n        });\r\n      });\r\n      this.emitSelectedRows();\r\n    },\r\n\r\n    toggleSelectAll() {\r\n      if (this.allSelected) {\r\n        this.unselectAllInternal();\r\n        return;\r\n      }\r\n      const rows = this.selectAllByPage ? this.paginated : this.filteredRows;\r\n      rows.forEach((headerRow) => {\r\n        headerRow.children.forEach((row) => {\r\n          this.$set(row, 'vgtSelected', true);\r\n        });\r\n      });\r\n      this.emitSelectedRows();\r\n    },\r\n\r\n    toggleSelectGroup(event, headerRow) {\r\n      headerRow.children.forEach((row) => {\r\n        this.$set(row, 'vgtSelected', event.checked);\r\n      });\r\n    },\r\n\r\n    changePage(value) {\r\n      const enabled = this.paginate;\r\n      let { paginationBottom, paginationTop } = this.$refs\r\n      if (enabled) {\r\n        if (this.paginateOnTop && paginationTop) {\r\n          paginationTop.currentPage = value\r\n        }\r\n        if (this.paginateOnBottom && paginationBottom) {\r\n          paginationBottom.currentPage = value\r\n        }\r\n        // we also need to set the currentPage\r\n        // for table.\r\n        this.currentPage = value;\r\n      }\r\n    },\r\n\r\n    pageChangedEvent() {\r\n      return {\r\n        currentPage: this.currentPage,\r\n        currentPerPage: this.currentPerPage,\r\n        total: Math.floor(this.totalRowCount / this.currentPerPage),\r\n      };\r\n    },\r\n\r\n    pageChanged(pagination) {\r\n      this.currentPage = pagination.currentPage;\r\n      if (!pagination.noEmit) {\r\n        const pageChangedEvent = this.pageChangedEvent();\r\n        pageChangedEvent.prevPage = pagination.prevPage;\r\n        this.$emit('on-page-change', pageChangedEvent);\r\n        if (this.mode === 'remote') {\r\n          this.$emit('update:isLoading', true);\r\n        }\r\n      }\r\n    },\r\n\r\n    perPageChanged(pagination) {\r\n      this.currentPerPage = pagination.currentPerPage;\r\n      // ensure that both sides of pagination are in agreement\r\n      // this fixes changes during position = 'both'\r\n      let paginationPosition = this.paginationOptions.position\r\n      if (this.$refs.paginationTop && (paginationPosition === 'top' || paginationPosition === 'both')) {\r\n        this.$refs.paginationTop.currentPerPage = this.currentPerPage\r\n      }\r\n      if (this.$refs.paginationBottom && (paginationPosition === 'bottom' || paginationPosition === 'both')) {\r\n        this.$refs.paginationBottom.currentPerPage = this.currentPerPage\r\n      }\r\n      //* update perPage also\r\n      const perPageChangedEvent = this.pageChangedEvent();\r\n      this.$emit('on-per-page-change', perPageChangedEvent);\r\n      if (this.mode === 'remote') {\r\n        this.$emit('update:isLoading', true);\r\n      }\r\n    },\r\n\r\n    changeSort(sorts) {\r\n      this.sorts = sorts;\r\n      this.$emit('on-sort-change', sorts);\r\n\r\n      // every time we change sort we need to reset to page 1\r\n      this.changePage(1);\r\n\r\n      // if the mode is remote, we don't need to do anything\r\n      // after this. just set table loading to true\r\n      if (this.mode === 'remote') {\r\n        this.$emit('update:isLoading', true);\r\n        return;\r\n      }\r\n      this.sortChanged = true;\r\n    },\r\n\r\n    // checkbox click should always do the following\r\n    onCheckboxClicked(row, index, event) {\r\n      \r\n      if (event.shiftKey && this.lastIndex > -1) { // support for multiple select with shift\r\n        const first = Math.min(this.lastIndex, index), last = Math.max(this.lastIndex, index);\r\n        for (let i = first; i <= last;i++) this.$set(this.rows[i], 'vgtSelected', !row.vgtSelected);\r\n      }\r\n      this.lastIndex = index;\r\n      this.$set(row, 'vgtSelected', !row.vgtSelected);\r\n      this.$emit('on-row-click', {\r\n        row,\r\n        pageIndex: index,\r\n        selected: !!row.vgtSelected,\r\n        event,\r\n      });\r\n    },\r\n\r\n    onRowDoubleClicked(row, index, event) {\r\n      this.$emit('on-row-dblclick', {\r\n        row,\r\n        pageIndex: index,\r\n        selected: !!row.vgtSelected,\r\n        event,\r\n      });\r\n    },\r\n\r\n    onRowClicked(row, index, event) {\r\n      if (this.selectable && !this.selectOnCheckboxOnly) {\r\n        this.$set(row, 'vgtSelected', !row.vgtSelected);\r\n      }\r\n      this.$emit('on-row-click', {\r\n        row,\r\n        pageIndex: index,\r\n        selected: !!row.vgtSelected,\r\n        event,\r\n      });\r\n    },\r\n\r\n    onRowAuxClicked(row, index, event) {\r\n      this.$emit('on-row-aux-click', {\r\n        row,\r\n        pageIndex: index,\r\n        selected: !!row.vgtSelected,\r\n        event,\r\n      });\r\n    },\r\n\r\n    onCellClicked(row, column, rowIndex, event) {\r\n      this.$emit('on-cell-click', {\r\n        row,\r\n        column,\r\n        rowIndex,\r\n        event,\r\n      });\r\n    },\r\n\r\n    onMouseenter(row, index) {\r\n      this.$emit('on-row-mouseenter', {\r\n        row,\r\n        pageIndex: index,\r\n      });\r\n    },\r\n\r\n    onMouseleave(row, index) {\r\n      this.$emit('on-row-mouseleave', {\r\n        row,\r\n        pageIndex: index,\r\n      });\r\n    },\r\n\r\n    searchTableOnEnter() {\r\n      if (this.searchTrigger === 'enter') {\r\n        this.handleSearch();\r\n        // we reset the filteredRows here because\r\n        // we want to search across everything.\r\n        this.filteredRows = JSON.parse(JSON.stringify(this.originalRows));\r\n        this.forceSearch = true;\r\n        this.sortChanged = true;\r\n      }\r\n    },\r\n\r\n    searchTableOnKeyUp() {\r\n      if (this.searchTrigger !== 'enter') {\r\n        this.handleSearch();\r\n      }\r\n    },\r\n\r\n    resetTable() {\r\n      this.unselectAllInternal(true);\r\n      // every time we searchTable\r\n      this.changePage(1);\r\n    },\r\n\r\n    // field can be:\r\n    // 1. function (passed as a string using function.name. For example: 'bound myFunction')\r\n    // 2. regular property - ex: 'prop'\r\n    // 3. nested property path - ex: 'nested.prop'\r\n    collect(obj, field) {\r\n      // utility function to get nested property\r\n      function dig(obj, selector) {\r\n        let result = obj;\r\n        const splitter = selector.split('.');\r\n        for (let i = 0; i < splitter.length; i++) {\r\n          if (typeof result === 'undefined' || result === null) {\r\n            return undefined;\r\n          }\r\n          result = result[splitter[i]];\r\n        }\r\n        return result;\r\n      }\r\n\r\n      if (typeof field === 'function') return field(obj);\r\n      if (typeof field === 'string') return dig(obj, field);\r\n      return undefined;\r\n    },\r\n\r\n    collectFormatted(obj, column, headerRow = false) {\r\n      let value;\r\n      if (headerRow && column.headerField) {\r\n        value = this.collect(obj, column.headerField);\r\n      } else {\r\n        value = this.collect(obj, column.field);\r\n      }\r\n      if (value === undefined) return '';\r\n\r\n      // if user has supplied custom formatter,\r\n      // use that here\r\n      if (column.formatFn && typeof column.formatFn === 'function') {\r\n        return column.formatFn(value, obj);\r\n      }\r\n\r\n      // lets format the resultant data\r\n      let type = column.typeDef;\r\n      // this will only happen if we try to collect formatted\r\n      // before types have been initialized. for example: on\r\n      // load when external query is specified.\r\n      if (!type) {\r\n        type = this.dataTypes[column.type] || defaultType;\r\n      }\r\n\r\n      let result = type.format(value, column);\r\n      // we must have some values in compact mode\r\n      if (this.compactMode && (result == '' || result == null)) return '-';\r\n      return result;\r\n    },\r\n\r\n    formattedRow(row, isHeaderRow = false) {\r\n      const formattedRow = {};\r\n      for (let i = 0; i < this.typedColumns.length; i++) {\r\n        const col = this.typedColumns[i];\r\n        // what happens if field is\r\n        if (col.field) {\r\n          formattedRow[col.field] = this.collectFormatted(\r\n            row,\r\n            col,\r\n            isHeaderRow\r\n          );\r\n        }\r\n      }\r\n      return formattedRow;\r\n    },\r\n\r\n    // Get classes for the given column index & element.\r\n    getClasses(index, element, row) {\r\n      const { typeDef, [`${element}Class`]: custom } = this.typedColumns[index];\r\n      let { isRight } = typeDef;\r\n      if (this.rtl) isRight = true;\r\n\r\n      const classes = {\r\n        'vgt-right-align': isRight,\r\n        'vgt-left-align': !isRight,\r\n      };\r\n\r\n      // for td we need to check if value is\r\n      // a function.\r\n      if (typeof custom === 'function') {\r\n        classes[custom(row)] = true;\r\n      } else if (typeof custom === 'string') {\r\n        classes[custom] = true;\r\n      }\r\n      return classes;\r\n    },\r\n\r\n    // method to filter rows\r\n    filterRows(columnFilters, fromFilter = true) {\r\n      // if (!this.rows.length) return;\r\n      // this is invoked either as a result of changing filters\r\n      // or as a result of modifying rows.\r\n      this.columnFilters = columnFilters;\r\n      let computedRows = JSON.parse(JSON.stringify(this.originalRows));\r\n      let instancesOfFiltering = false;\r\n\r\n      // do we have a filter to care about?\r\n      // if not we don't need to do anything\r\n      if (this.columnFilters && Object.keys(this.columnFilters).length) {\r\n        // every time we filter rows, we need to set current page\r\n        // to 1\r\n        // if the mode is remote, we only need to reset, if this is\r\n        // being called from filter, not when rows are changing\r\n        if (this.mode !== 'remote' || fromFilter) {\r\n          this.changePage(1);\r\n        }\r\n        // we need to emit an event and that's that.\r\n        // but this only needs to be invoked if filter is changing\r\n        // not when row object is modified.\r\n        if (fromFilter) {\r\n          this.$emit('on-column-filter', {\r\n            columnFilters: this.columnFilters,\r\n          });\r\n        }\r\n\r\n        // if mode is remote, we don't do any filtering here.\r\n        if (this.mode === 'remote') {\r\n          if (fromFilter) {\r\n            this.$emit('update:isLoading', true);\r\n          } else {\r\n            // if remote filtering has already been taken care of.\r\n            this.filteredRows = computedRows;\r\n          }\r\n          return;\r\n        }\r\n\r\n        const fieldKey = (field) => {\r\n          if (typeof(field) === 'function' && field.name) {\r\n            return field.name;\r\n          }\r\n          return field;\r\n        }\r\n\r\n        for (let i = 0; i < this.typedColumns.length; i++) {\r\n          const col = this.typedColumns[i];\r\n          if (this.columnFilters[fieldKey(col.field)]) {\r\n\r\n            instancesOfFiltering = true;\r\n            computedRows.forEach((headerRow) => {\r\n              const newChildren = headerRow.children.filter((row) => {\r\n                // If column has a custom filter, use that.\r\n                if (\r\n                  col.filterOptions &&\r\n                  typeof col.filterOptions.filterFn === 'function'\r\n                ) {\r\n                  return col.filterOptions.filterFn(\r\n                    this.collect(row, col.field),\r\n                    this.columnFilters[fieldKey(col.field)]\r\n                  );\r\n                }\r\n\r\n                // Otherwise Use default filters\r\n                const { typeDef } = col;\r\n                return typeDef.filterPredicate(\r\n                  this.collect(row, col.field),\r\n                  this.columnFilters[fieldKey(col.field)],\r\n                  false,\r\n                  col.filterOptions &&\r\n                    typeof col.filterOptions.filterDropdownItems === 'object'\r\n                );\r\n              });\r\n              // should we remove the header?\r\n              headerRow.children = newChildren;\r\n            });\r\n          }\r\n        }\r\n      }\r\n\r\n      if (instancesOfFiltering) {\r\n        this.filteredRows = computedRows.filter((h) => h.children && h.children.length);\r\n      } else {\r\n        this.filteredRows = computedRows;\r\n      }\r\n    },\r\n\r\n    getCurrentIndex(rowId) {\r\n      let index = 0;\r\n      let found = false;\r\n      for (let i = 0; i < this.paginated.length; i += 1) {\r\n        const headerRow = this.paginated[i];\r\n        const { children } = headerRow;\r\n        if (children && children.length) {\r\n          for (let j = 0; j < children.length; j += 1) {\r\n            const c = children[j];\r\n            if (c.originalIndex === rowId) {\r\n              found = true;\r\n              break;\r\n            }\r\n            index += 1;\r\n          }\r\n        }\r\n        if (found) break;\r\n      }\r\n      return ((this.currentPage - 1) * this.currentPerPage) + index + 1;\r\n    },\r\n\r\n    getRowStyleClass(row) {\r\n      let classes = '';\r\n      if (this.hasRowClickListener) classes += 'clickable';\r\n      let rowStyleClasses;\r\n      if (typeof this.rowStyleClass === 'function') {\r\n        rowStyleClasses = this.rowStyleClass(row);\r\n      } else {\r\n        rowStyleClasses = this.rowStyleClass;\r\n      }\r\n      if (rowStyleClasses) {\r\n        classes += ` ${rowStyleClasses}`;\r\n      }\r\n      return classes;\r\n    },\r\n\r\n    handleGrouped(originalRows) {\r\n      originalRows.forEach((headerRow, i) => {\r\n        headerRow.vgt_header_id = i;\r\n        if (\r\n          this.groupOptions.maintainExpanded &&\r\n          this.expandedRowKeys.has(headerRow[this.groupOptions.rowKey])\r\n        ) {\r\n          this.$set(headerRow, 'vgtIsExpanded', true);\r\n        }\r\n        headerRow.children.forEach((childRow) => {\r\n          childRow.vgt_id = i;\r\n        });\r\n      });\r\n      return originalRows;\r\n    },\r\n\r\n    initializePagination() {\r\n      const {\r\n        enabled,\r\n        perPage,\r\n        position,\r\n        perPageDropdown,\r\n        perPageDropdownEnabled,\r\n        dropdownAllowAll,\r\n        firstLabel,\r\n        lastLabel,\r\n        nextLabel,\r\n        prevLabel,\r\n        rowsPerPageLabel,\r\n        ofLabel,\r\n        pageLabel,\r\n        allLabel,\r\n        setCurrentPage,\r\n        mode,\r\n        infoFn,\r\n      } = this.paginationOptions;\r\n\r\n      if (typeof enabled === 'boolean') {\r\n        this.paginate = enabled;\r\n      }\r\n\r\n      if (typeof perPage === 'number') {\r\n        this.perPage = perPage;\r\n      }\r\n\r\n      if (position === 'top') {\r\n        this.paginateOnTop = true; // default is false\r\n        this.paginateOnBottom = false; // default is true\r\n      } else if (position === 'both') {\r\n        this.paginateOnTop = true;\r\n        this.paginateOnBottom = true;\r\n      }\r\n\r\n      if (Array.isArray(perPageDropdown) && perPageDropdown.length) {\r\n        this.customRowsPerPageDropdown = perPageDropdown;\r\n        if (!this.perPage) {\r\n          [this.perPage] = perPageDropdown;\r\n        }\r\n      }\r\n\r\n      if (typeof perPageDropdownEnabled === 'boolean') {\r\n        this.perPageDropdownEnabled = perPageDropdownEnabled;\r\n      }\r\n\r\n      if (typeof dropdownAllowAll === 'boolean') {\r\n        this.paginateDropdownAllowAll = dropdownAllowAll;\r\n      }\r\n\r\n      if (typeof mode === 'string') {\r\n        this.paginationMode = mode;\r\n      }\r\n\r\n      if (typeof firstLabel === 'string') {\r\n        this.firstText = firstLabel;\r\n      }\r\n\r\n      if (typeof lastLabel === 'string') {\r\n        this.lastText = lastLabel;\r\n      }\r\n\r\n      if (typeof nextLabel === 'string') {\r\n        this.nextText = nextLabel;\r\n      }\r\n\r\n      if (typeof prevLabel === 'string') {\r\n        this.prevText = prevLabel;\r\n      }\r\n\r\n      if (typeof rowsPerPageLabel === 'string') {\r\n        this.rowsPerPageText = rowsPerPageLabel;\r\n      }\r\n\r\n      if (typeof ofLabel === 'string') {\r\n        this.ofText = ofLabel;\r\n      }\r\n\r\n      if (typeof pageLabel === 'string') {\r\n        this.pageText = pageLabel;\r\n      }\r\n\r\n      if (typeof allLabel === 'string') {\r\n        this.allText = allLabel;\r\n      }\r\n\r\n      if (typeof setCurrentPage === 'number') {\r\n        setTimeout(() => {\r\n          this.changePage(setCurrentPage);\r\n        }, 500);\r\n      }\r\n\r\n      if (typeof infoFn === 'function') {\r\n        this.paginationInfoFn = infoFn;\r\n      }\r\n    },\r\n\r\n    initializeSearch() {\r\n      const {\r\n        enabled,\r\n        trigger,\r\n        externalQuery,\r\n        searchFn,\r\n        placeholder,\r\n        skipDiacritics,\r\n      } = this.searchOptions;\r\n\r\n      if (typeof enabled === 'boolean') {\r\n        this.searchEnabled = enabled;\r\n      }\r\n\r\n      if (trigger === 'enter') {\r\n        this.searchTrigger = trigger;\r\n      }\r\n\r\n      if (typeof externalQuery === 'string') {\r\n        this.externalSearchQuery = externalQuery;\r\n      }\r\n\r\n      if (typeof searchFn === 'function') {\r\n        this.searchFn = searchFn;\r\n      }\r\n\r\n      if (typeof placeholder === 'string') {\r\n        this.searchPlaceholder = placeholder;\r\n      }\r\n\r\n      if (typeof skipDiacritics === 'boolean') {\r\n        this.searchSkipDiacritics = skipDiacritics;\r\n      }\r\n    },\r\n\r\n    initializeSort() {\r\n      const { enabled, initialSortBy, multipleColumns } = this.sortOptions;\r\n      const initSortBy = JSON.parse(JSON.stringify(initialSortBy || {}));\r\n\r\n      if (typeof enabled === 'boolean') {\r\n        this.sortable = enabled;\r\n      }\r\n\r\n      if (typeof multipleColumns === 'boolean') {\r\n        this.multipleColumnSort = multipleColumns;\r\n      }\r\n\r\n      //* initialSortBy can be an array or an object\r\n      if (typeof initSortBy === 'object') {\r\n        const ref = this.fixedHeader\r\n          ? this.$refs['table-header-secondary']\r\n          : this.$refs['table-header-primary'];\r\n        if (Array.isArray(initSortBy)) {\r\n          ref.setInitialSort(initSortBy);\r\n        } else {\r\n          const hasField = Object.prototype.hasOwnProperty.call(\r\n            initSortBy,\r\n            'field'\r\n          );\r\n          if (hasField) ref.setInitialSort([initSortBy]);\r\n        }\r\n      }\r\n    },\r\n\r\n    initializeSelect() {\r\n      const {\r\n        enabled,\r\n        selectionInfoClass,\r\n        selectionText,\r\n        clearSelectionText,\r\n        selectOnCheckboxOnly,\r\n        selectAllByPage,\r\n        disableSelectInfo,\r\n        selectAllByGroup,\r\n      } = this.selectOptions;\r\n\r\n      if (typeof enabled === 'boolean') {\r\n        this.selectable = enabled;\r\n      }\r\n\r\n      if (typeof selectOnCheckboxOnly === 'boolean') {\r\n        this.selectOnCheckboxOnly = selectOnCheckboxOnly;\r\n      }\r\n\r\n      if (typeof selectAllByPage === 'boolean') {\r\n        this.selectAllByPage = selectAllByPage;\r\n      }\r\n\r\n      if (typeof selectAllByGroup === 'boolean') {\r\n        this.selectAllByGroup = selectAllByGroup;\r\n      }\r\n\r\n      if (typeof disableSelectInfo === 'boolean') {\r\n        this.disableSelectInfo = disableSelectInfo;\r\n      }\r\n\r\n      if (typeof selectionInfoClass === 'string') {\r\n        this.selectionInfoClass = selectionInfoClass;\r\n      }\r\n\r\n      if (typeof selectionText === 'string') {\r\n        this.selectionText = selectionText;\r\n      }\r\n\r\n      if (typeof clearSelectionText === 'string') {\r\n        this.clearSelectionText = clearSelectionText;\r\n      }\r\n    },\r\n  },\r\n\r\n  mounted() {\r\n    if (this.perPage) {\r\n      this.currentPerPage = this.perPage;\r\n    }\r\n    this.initializeSort();\r\n  },\r\n\r\n  components: {\r\n    'vgt-pagination': VgtPagination,\r\n    'vgt-global-search': VgtGlobalSearch,\r\n    'vgt-header-row': VgtHeaderRow,\r\n    'vgt-table-header': VgtTableHeader,\r\n  },\r\n};\r\n</script>\r\n\r\n<style lang=\"scss\">\r\n\r\n@import \"../styles/style\";\r\n</style>\r\n","import * as date from './date';\r\nimport * as decimal from './decimal';\r\nimport * as number from './number';\r\nimport * as percentage from './percentage';\r\nimport * as boolean from './boolean';\r\n\r\nexport default {\r\n  date,\r\n  decimal,\r\n  number,\r\n  percentage,\r\n  boolean,\r\n};\r\n","import VueGoodTable from './components/Table.vue';\r\n\r\nconst VueGoodTablePlugin = {\r\n  install(Vue, options) {\r\n    Vue.component(VueGoodTable.name, VueGoodTable);\r\n  },\r\n};\r\n\r\n// Automatic installation if Vue has been added to the global scope.\r\nif (typeof window !== 'undefined' && window.Vue) {\r\n  window.Vue.use(VueGoodTablePlugin);\r\n}\r\n\r\nexport default VueGoodTablePlugin;\r\nexport { VueGoodTable };\r\n"],"names":["SORT_TYPES","PAGINATION_MODES","DEFAULT_ROWS_PER_PAGE_DROPDOWN","diacritics","a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z","compiledDiactitics","key","ok","rval","val","regexNonASCII","diacriticless","text","search","result","len","length","searchChar","charAt","escapeRegExp","str","replace","defaultType","format","filterPredicate","rowval","filter","skipDiacritics","fromDropdown","rowValue","String","toLowerCase","searchTerm","indexOf","compare","cook","normalizeComponent","template","style","script","scopeId","isFunctionalTemplate","moduleIdentifier","shadowMode","createInjector","createInjectorSSR","createInjectorShadow","options","hook","render","staticRenderFns","_compiled","functional","_scopeId","context","this","$vnode","ssrContext","parent","__VUE_SSR_CONTEXT__","call","_registeredComponents","add","_ssrRegister","$root","$options","shadowRoot","originalRender","existing","beforeCreate","concat","name","props","styleClass","default","total","perPage","rtl","perPageDropdownEnabled","customRowsPerPageDropdown","paginateDropdownAllowAll","mode","jumpFirstOrLast","firstText","lastText","nextText","prevText","rowsPerPageText","ofText","pageText","allText","infoFn","data","id","getId","currentPage","prevPage","currentPerPage","rowsPerPageOptions","watch","handler","newValue","oldValue","handlePerPage","perPageChanged","immediate","computed","pagesCount","quotient","Math","floor","firstIsPossible","lastIsPossible","ceil","nextIsPossible","prevIsPossible","methods","random","Date","now","changePage","pageNumber","emit","pageChanged","firstPage","lastPage","prev","nextPage","previousPage","payload","noEmit","$emit","Array","isArray","JSON","parse","stringify","found","unshift","mounted","components","pagination-page-info","totalRecords","type","pageInfo","firstRecordOnPage","lastRecordOnPage","min","recordInfo","first","last","infoParams","totalPage","event","value","parseInt","target","Number","isNaN","globalSearchTerm","showControlBar","searchEnabled","$slots","updateValue","entered","getColumnFirstSortType","column","firstSortType","getNextSort","currentSort","lineNumbers","Boolean","selectable","allSelected","allSelectedIndeterminate","columns","typedColumns","sortable","multipleColumnSort","getClasses","Function","tableRef","paginated","setColumnStyles","deep","checkBoxThStyle","lineNumberThStyle","columnStyles","sorts","ro","reset","$refs","toggleSelectAll","isSortableColumn","sort","shiftKey","sortArray","index","field","getIndex","push","secondarySort","currentPrimarySort","undefined","getCurrentPrimarySort","nextPrimarySort","primarySort","setInitialSort","getColumnSort","getColumnSortLong","getHeaderClasses","Object","assign","sorting sorting-desc","sorting sorting-asc","filterRows","columnFilters","getWidthStyle","dom","window","getComputedStyle","width","colStyles","skip","cell","rows","cells","minWidth","maxWidth","getColumnStyle","styleObject","cellStyle","_this","$nextTick","ResizeObserver","observe","$parent","$el","from","children","forEach","header","beforeDestroy","disconnect","vgt-filter-row","populateInitialFilters","timer","hasFilterRow","col","filterOptions","enabled","fieldKey","emitEvent","isFilterable","isDropdown","filterDropdownItems","isDropdownObjects","_typeof","isDropdownArray","firstClass","split","join","getPlaceholder","placeholder","label","getName","updateFiltersOnEnter","clearTimeout","updateFiltersImmediately","updateFiltersOnKeyup","trigger","updateFilters","updateSlotFilter","fieldToFilter","slotFilterField","formatValue","setTimeout","$set","filterValue","headerRow","selectAllByGroup","collapsable","collectFormatted","formattedRow","fullColspan","groupIndex","groupChildObject","row","vgtSelected","columnCollapsable","currentIndex","toggleSelectGroup","checked","date","def","isRight","dateInputFormat","isValid","compareAsc","dateOutputFormat","console","error","number","Infinity","parseFloat","decimal","round","toFixed","percentage","boolean","dataTypes","coreDataTypes","keys","compName","isLoading","maxHeight","fixedHeader","theme","totalRows","responsive","rowStyleClass","compactMode","groupOptions","rowKey","selectOptions","selectionInfoClass","selectionText","clearSelectionText","disableSelectInfo","sortOptions","multipleColumns","initialSortBy","paginationOptions","_ref","_defineProperty","position","perPageDropdown","searchOptions","externalQuery","searchFn","tableLoading","selectOnCheckboxOnly","selectAllByPage","maintainExpanded","expandedRowKeys","Set","defaultSortBy","searchTrigger","externalSearchQuery","searchPlaceholder","searchSkipDiacritics","paginate","paginateOnTop","paginateOnBottom","paginationMode","paginationInfoFn","filteredRows","forceSearch","sortChanged","initializeSelect","isEqual","initializePagination","handleSearch","initializeSearch","initializeSort","selectedRows","tableStyles","tableStyleClasses","hasFooterSlot","wrapperStyles","overflow","rowKeyField","hasHeaderRowTemplate","$scopedSlots","showEmptySlot","selectedRowCount","selectedPageRowsCount","totalPageRowCount","totalRowCount","selectionInfo","selectedPageRows","processedRows","r1","r2","originalIndex","hidden","groupHeaderOnTop","headerPosition","groupHeaderOnBottom","reduce","wrapStyleClasses","classes","globalSearchAllowed","computedRows","allRows","globalSearchDisabled","rowCount","vgt_header_id","vgt_id","newHeaderRow","cRows","xRow","yRow","sortValue","srt","getColumnForField","xvalue","collect","yvalue","sortFn","typeDef","_this2","paginatedRows","childRows","_paginatedRows","pageStart","pageEnd","slice","reconstructedRows","flatRow","handleExpanded","hRow","find","originalRows","nestedRows","handleGrouped","hasRowClickListener","$listeners","has","toggleExpand","_this3","vgtIsExpanded","expandAll","_this4","collapseAll","_this5","clear","resetTable","emitSelectedRows","selected","unselectAllInternal","forceAll","_this6","_this7","_this8","_this$$refs","paginationBottom","paginationTop","pageChangedEvent","pagination","paginationPosition","perPageChangedEvent","changeSort","onCheckboxClicked","lastIndex","max","pageIndex","onRowDoubleClicked","onRowClicked","onRowAuxClicked","onCellClicked","rowIndex","onMouseenter","onMouseleave","searchTableOnEnter","searchTableOnKeyUp","obj","selector","splitter","dig","headerField","formatFn","isHeaderRow","element","_this$typedColumns$in","custom","vgt-right-align","vgt-left-align","_this9","fromFilter","instancesOfFiltering","_ret","_loop","newChildren","filterFn","getCurrentIndex","rowId","getRowStyleClass","rowStyleClasses","_this10","childRow","_this11","_this$paginationOptio","dropdownAllowAll","firstLabel","lastLabel","nextLabel","prevLabel","rowsPerPageLabel","ofLabel","pageLabel","allLabel","setCurrentPage","_perPageDropdown","_slicedToArray","_this$searchOptions","_this$sortOptions","initSortBy","ref","prototype","hasOwnProperty","_this$selectOptions","vgt-pagination","VgtPagination","vgt-global-search","VgtGlobalSearch","vgt-header-row","VgtHeaderRow","vgt-table-header","VgtTableHeader","VueGoodTablePlugin","install","Vue","component","VueGoodTable","use"],"mappings":";;;;;;;29EAAA,IACMA,EACO,MADPA,EAEQ,OAFRA,EAGE,OAGFC,EAEK,UAELC,EAAiC,CAAC,GAAI,GAAI,GAAI,GAAI,ICVpDC,EAAa,CACfC,EAAG,CACD,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,KAEFC,EAAG,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAC3DC,EAAG,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAC1EC,EAAG,CACD,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,KAEFC,EAAG,CACD,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,KAEFC,EAAG,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAClCC,EAAG,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KACpFC,EAAG,CACD,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,KAEFC,EAAG,CACD,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,KAEFC,EAAG,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAC5CC,EAAG,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAC3DC,EAAG,CACD,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,KAEFC,EAAG,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KACzFC,EAAG,CACD,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,KAEFC,EAAG,CACD,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,MAEFC,EAAG,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KACvCC,EAAG,CAAC,IAAK,IAAK,IAAK,IAAK,KACxBC,EAAG,CACD,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,KAEFC,EAAG,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAC1EC,EAAG,CACD,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,KAEFC,EAAG,CACD,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,KAEFC,EAAG,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KACtDC,EAAG,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAC3DC,EAAG,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAC5CC,EAAG,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAChEC,EAAG,CACD,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,MAKEC,EAAsB,WAC1B,IAAIH,EAAI,GAER,IAAK,IAAII,KAAO5B,EAAY,CAC1B,IAAI6B,EAAK7B,EAAW4B,GAEpB,IAAK,IAAIE,KAAQD,EAAI,CACnB,IAAIE,EAAMF,EAAGC,GAGTC,IAAQH,IACVJ,EAAEO,GAAOH,IAKf,OAAOJ,EAhBmB,GAoBtBQ,EAAgB,iBAKhBC,EAAgB,SAACC,GAErB,IAAoC,IAAhCA,EAAKC,OAAOH,GACd,OAAOE,EAMT,IAHA,IAAIE,EAAS,GAETC,EAAMH,EAAKI,OACN7B,EAAI,EAAGA,EAAI4B,EAAK5B,IAAK,CAC5B,IAAI8B,EAAaL,EAAKM,OAAO/B,GAG7B2B,GAAUG,KAAcZ,EAAqBA,EAAmBY,GAAcA,EAGhF,OAAOH,GC9ZHK,EAAe,SAAAC,GAAG,OAAIA,EAAIC,QAAQ,sBAAuB,SAEhDC,EAAA,CACbC,OAAM,SAACrB,GACL,OAAOA,GAETsB,gBAAgBC,SAAAA,EAAQC,GAAsD,IAA9CC,0DAAwBC,0DAEtD,GAAI,MAAOH,EACT,OAAO,EAIT,IAAMI,EAAWF,EACbG,OAAOL,GAAQM,cACfpB,EAAcQ,EAAaW,OAAOL,IAASM,eAGzCC,EAAaL,EACfD,EAAOK,cACPpB,EAAcQ,EAAaO,GAAQK,eAGvC,OAAOH,EAAeC,IAAaG,EAAcH,EAASI,QAAQD,IAAe,GAGnFE,QAAQhC,SAAAA,EAAGC,GACT,SAASgC,EAAKrD,GACZ,OAAI,MAAOA,EAAwC,GAC5C6B,EAAcmB,OAAOhD,GAAGiD,eAIjC,OAFA7B,EAAIiC,EAAKjC,KACTC,EAAIgC,EAAKhC,KACU,EACfD,EAAIC,EAAU,EACX,ICrCX,SAASiC,EAAmBC,EAAUC,EAAOC,EAAQC,EAASC,EAAsBC,EAAoCC,EAAYC,EAAgBC,EAAmBC,GACzI,kBAAfH,IACPE,EAAoBD,EACpBA,EAAiBD,EACjBA,GAAa,GAGjB,MAAMI,EAA4B,mBAAXR,EAAwBA,EAAOQ,QAAUR,EAehE,IAAIS,EAmCJ,GAhDIX,GAAYA,EAASY,SACrBF,EAAQE,OAASZ,EAASY,OAC1BF,EAAQG,gBAAkBb,EAASa,gBACnCH,EAAQI,WAAY,EAEhBV,IACAM,EAAQK,YAAa,IAIzBZ,IACAO,EAAQM,SAAWb,GAGnBE,GAEAM,EAAO,SAAUM,IAEbA,EACIA,GACKC,KAAKC,QAAUD,KAAKC,OAAOC,YAC3BF,KAAKG,QAAUH,KAAKG,OAAOF,QAAUD,KAAKG,OAAOF,OAAOC,aAElB,oBAAxBE,sBACnBL,EAAUK,qBAGVrB,GACAA,EAAMsB,KAAKL,KAAMV,EAAkBS,IAGnCA,GAAWA,EAAQO,uBACnBP,EAAQO,sBAAsBC,IAAIpB,IAK1CK,EAAQgB,aAAef,GAElBV,IACLU,EAAOL,EACD,SAAUW,GACRhB,EAAMsB,KAAKL,KAAMT,EAAqBQ,EAASC,KAAKS,MAAMC,SAASC,cAErE,SAAUZ,GACRhB,EAAMsB,KAAKL,KAAMX,EAAeU,MAGxCN,EACA,GAAID,EAAQK,WAAY,CAEpB,MAAMe,EAAiBpB,EAAQE,OAC/BF,EAAQE,OAAS,SAAkC/D,EAAGoE,GAElD,OADAN,EAAKY,KAAKN,GACHa,EAAejF,EAAGoE,QAG5B,CAED,MAAMc,EAAWrB,EAAQsB,aACzBtB,EAAQsB,aAAeD,EAAW,GAAGE,OAAOF,EAAUpB,GAAQ,CAACA,GAGvE,OAAOT,ECtEX,m/FC8FA,CACAgC,KAAA,gBACAC,MAAA,CACAC,WAAA,CAAAC,QAAA,wBACAC,MAAA,CAAAD,QAAA,MACAE,QAAA,GACAC,IAAA,CAAAH,SAAA,GACAI,uBAAA,CAAAJ,SAAA,GACAK,0BAAA,CAAAL,QAAA,WAAA,MAAA,KACAM,yBAAA,CAAAN,SAAA,GACAO,KAAA,CAAAP,QAAAlG,GACA0G,gBAAA,CAAAR,SAAA,GAGAS,UAAA,CAAAT,QAAA,SACAU,SAAA,CAAAV,QAAA,QACAW,SAAA,CAAAX,QAAA,QACAY,SAAA,CAAAZ,QAAA,QACAa,gBAAA,CAAAb,QAAA,kBACAc,OAAA,CAAAd,QAAA,MACAe,SAAA,CAAAf,QAAA,QACAgB,QAAA,CAAAhB,QAAA,OACAiB,OAAA,CAAAjB,QAAA,OAGAkB,KAAA,WACA,MAAA,CACAC,GAAAtC,KAAAuC,QACAC,YAAA,EACAC,SAAA,EACAC,eAAA,GACAC,mBAAA,KAGAC,MAAA,CACAvB,QAAA,CACAwB,QAAAC,SAAAA,EAAAC,GACA/C,KAAAgD,gBACAhD,KAAAiD,eAAAF,IAEAG,WAAA,GAGA1B,0BAAA,WACAxB,KAAAgD,iBAGA5B,MAAA,CACAyB,QAAAC,SAAAA,EAAAC,IACA,IAAA/C,KAAA2C,mBAAAjE,QAAAsB,KAAA0C,kBACA1C,KAAA0C,eAAAI,MAMAK,SAAA,CAEAC,WAAA,WAEA,IAAA,IAAApD,KAAA0C,eACA,OAAA,EAEA,IAAAW,EAAAC,KAAAC,MAAAvD,KAAAoB,MAAApB,KAAA0C,gBAGA,OAAA,IAFA1C,KAAAoB,MAAApB,KAAA0C,eAEAW,EAAAA,EAAA,GAIAG,gBAAA,WACA,OAAAxD,KAAAwC,YAAA,GAIAiB,eAAA,WACA,OAAAzD,KAAAwC,YAAAc,KAAAI,KAAA1D,KAAAoB,MAAApB,KAAA0C,iBAIAiB,eAAA,WACA,OAAA3D,KAAAwC,YAAAxC,KAAAoD,YAIAQ,eAAA,WACA,OAAA5D,KAAAwC,YAAA,IAIAqB,QAAA,CACAtB,MAAA,WACA,MAAA,kBAAAxB,OAAAuC,KAAAC,MAAAD,KAAAQ,SAAAC,KAAAC,SAGAC,WAAA,SAAAC,GAAA,IAAAC,6DACAD,EAAA,GAAAlE,KAAAoB,MAAApB,KAAA0C,gBAAAwB,EAAA,KACAlE,KAAAyC,SAAAzC,KAAAwC,YACAxC,KAAAwC,YAAA0B,EACAlE,KAAAoE,YAAAD,KAKAE,UAAA,WACArE,KAAAwD,kBACAxD,KAAAwC,YAAA,EACAxC,KAAAyC,SAAA,EACAzC,KAAAoE,gBAKAE,SAAA,WACAtE,KAAAyD,iBACAzD,KAAAwC,YAAAxC,KAAAoD,WACApD,KAAAuE,KAAAvE,KAAAwC,YAAA,EACAxC,KAAAoE,gBAKAI,SAAA,WACAxE,KAAA2D,iBACA3D,KAAAyC,SAAAzC,KAAAwC,cACAxC,KAAAwC,YACAxC,KAAAoE,gBAKAK,aAAA,WACAzE,KAAA4D,iBACA5D,KAAAyC,SAAAzC,KAAAwC,cACAxC,KAAAwC,YACAxC,KAAAoE,gBAKAA,YAAA,WAAA,IAAAD,6DACAO,EAAA,CACAlC,YAAAxC,KAAAwC,YACAC,SAAAzC,KAAAyC,UAEA0B,IAAAO,EAAAC,QAAA,GACA3E,KAAA4E,MAAA,eAAAF,IAIAzB,eAAA,SAAAF,GAEAA,GAEA/C,KAAA4E,MAAA,mBAAA,CAAAlC,eAAA1C,KAAA0C,iBAEA1C,KAAAiE,WAAA,GAAA,IAIAjB,cAAA,WAWA,GATA,OAAAhD,KAAAwB,2BACAqD,MAAAC,QAAA9E,KAAAwB,4BACA,IAAAxB,KAAAwB,0BAAA/D,OACAuC,KAAA2C,mBAAAoC,KAAAC,MAAAD,KAAAE,UAAAjF,KAAAwB,4BAGAxB,KAAA2C,mBAAAoC,KAAAC,MAAAD,KAAAE,UAAA/J,IAGA8E,KAAAqB,QAAA,CACArB,KAAA0C,eAAA1C,KAAAqB,QAGA,IADA,IAAA6D,GAAA,EACAtJ,EAAA,EAAAA,EAAAoE,KAAA2C,mBAAAlF,OAAA7B,IACAoE,KAAA2C,mBAAA/G,KAAAoE,KAAAqB,UACA6D,GAAA,GAGAA,IAAA,IAAAlF,KAAAqB,SACArB,KAAA2C,mBAAAwC,QAAAnF,KAAAqB,cAIArB,KAAA0C,eAAA,KAKA0C,QAAA,aAGAC,WAAA,CACAC,miCDjQA,CACAtE,KAAA,wBACAC,MAAA,CACAuB,YAAA,CACArB,QAAA,GAEAmD,SAAA,CACAnD,QAAA,GAEAoE,aAAA,CACApE,QAAA,GAEAc,OAAA,CACAd,QAAA,KACAqE,KAAAjH,QAEA2D,SAAA,CACAf,QAAA,OACAqE,KAAAjH,QAEAmE,eAAA,GACAhB,KAAA,CACAP,QAAAlG,GAEAmH,OAAA,CAAAjB,QAAA,OAEAkB,KAAA,WACA,MAAA,CACAC,GAAAtC,KAAAuC,UAGAY,SAAA,CACAsC,SAAA,WACA,MAAA,GAAA1E,OAAAf,KAAAiC,OAAA,KAAAlB,OAAAf,KAAAsE,WAEAoB,kBAAA,WACA,OAAA1F,KAAAwC,YAAA,GAAAxC,KAAA0C,eAAA,GAEAiD,iBAAA,WAEA,OAAA,IAAA3F,KAAA0C,eACA1C,KAAAuF,aAEAjC,KAAAsC,IAAA5F,KAAAuF,aAAAvF,KAAAwC,YAAAxC,KAAA0C,iBAEAmD,WAAA,WACA,IAAAC,EAAA9F,KAAA0F,kBACAK,EAAA/F,KAAA2F,iBAMA,OAJA,IAAAI,IACAD,EAAA,GAGAA,GAAAA,OAAAA,EAAAC,OAAAA,OAAAA,EAAA,KAAAhF,OAAAf,KAAAiC,OAAA,KAAAlB,OAAAf,KAAAuF,eAEAS,WAAA,WACA,IAAAF,EAAA9F,KAAA0F,kBACAK,EAAA/F,KAAA2F,iBAIA,OAHA,IAAAI,IACAD,EAAA,GAEA,CACAJ,kBAAAI,EACAH,iBAAAI,EACAR,aAAAvF,KAAAuF,aACA/C,YAAAxC,KAAAwC,YACAyD,UAAAjG,KAAAsE,YAIAT,QAAA,CACAtB,MAAA,WACA,MAAA,kBAAAxB,OAAAuC,KAAAC,MAAAD,KAAAQ,SAAAC,KAAAC,SAEAC,WAAA,SAAAiC,GACA,IAAAC,EAAAC,SAAAF,EAAAG,OAAAF,MAAA,IAGA,GAAAG,OAAAC,MAAAJ,IACAA,EAAAnG,KAAAsE,UACA6B,EAAA,EAEA,OADAD,EAAAG,OAAAF,MAAAnG,KAAAwC,aACA,EAIA0D,EAAAG,OAAAF,MAAAA,EACAnG,KAAA4E,MAAA,eAAAuB,KAGAf,QAAA,aAEAC,WAAA,ypCEhGA,CACArE,KAAA,kBACAC,MAAA,CACA,QACA,gBACA,2BAEAoB,KAAA,WACA,MAAA,CACAmE,iBAAA,KACAlE,GAAAtC,KAAAuC,UAGAY,SAAA,CACAsD,eAAA,WACA,QAAAzG,KAAA0G,kBACA1G,KAAA2G,SAAA3G,KAAA2G,OAAA,6BAIA9C,QAAA,CACA+C,YAAA,SAAAT,GACAnG,KAAA4E,MAAA,QAAAuB,GACAnG,KAAA4E,MAAA,WAAAuB,IAEAU,QAAA,SAAAV,GACAnG,KAAA4E,MAAA,WAAAuB,IAEA5D,MAAA,WACA,MAAA,cAAAxB,OAAAuC,KAAAC,MAAAD,KAAAQ,SAAAC,KAAAC,qDCrDA,SAAS8C,EAAuBC,GAC9B,OAAOA,EAAOC,ePNU,MOe1B,SAASC,EAAYC,EAAaH,GAChC,OAAI/L,IAA0B8L,EAAuBC,IAChDG,IAAgBlM,EACZA,EACEkM,IAAgBlM,EAClBA,EAELA,IAA0B8L,EAAuBC,IAChDG,IAAgBlM,EACZA,EACEkM,IAAgBlM,EAClBA,EAGLA,IAA0B8L,EAAuBC,IAChDG,IAAgBlM,EACZA,EAEAA,EAYX,y5CCgBA,CACAgG,KAAA,iBACAC,MAAA,CACAkG,YAAA,CACAhG,SAAA,EACAqE,KAAA4B,SAEAC,WAAA,CACAlG,SAAA,EACAqE,KAAA4B,SAEAE,YAAA,CACAnG,SAAA,EACAqE,KAAA4B,SAEAG,yBAAA,CACApG,SAAA,EACAqE,KAAA4B,SAEAI,QAAA,CACAhC,KAAAX,OAEAnD,KAAA,CACA8D,KAAAjH,QAEAkJ,aAAA,GAGAC,SAAA,CACAlC,KAAA4B,SAEAO,mBAAA,CACAnC,KAAA4B,QACAjG,SAAA,GAGAyG,WAAA,CACApC,KAAAqC,UAIAnB,cAAA,CACAlB,KAAA4B,SAGAU,SAAA,GAEAC,UAAA,IAEAnF,MAAA,CACA4E,QAAA,CACA3E,QAAA,WACA7C,KAAAgI,mBAEA9E,WAAA,GAEA4E,SAAA,CACAjF,QAAA,WACA7C,KAAAgI,mBAEA9E,WAAA,GAEA6E,UAAA,CACAlF,QAAA,WACA7C,KAAA8H,UACA9H,KAAAgI,mBAGAC,MAAA,IAGA5F,KAAA,WACA,MAAA,CACA6F,gBAAA,GACAC,kBAAA,GACAC,aAAA,GACAC,MAAA,GACAC,GAAA,OAGAnF,SAAA,GAGAU,QAAA,CACA0E,MAAA,WACAvI,KAAAwI,MAAA,cAAAD,OAAA,IAEAE,gBAAA,WACAzI,KAAA4E,MAAA,yBAEA8D,iBAAA,SAAA3B,GACA,IAAAW,EAAAX,EAAAW,SAEA,MADA,kBAAAA,EAAAA,EAAA1H,KAAA0H,UAGAiB,KAAAnN,SAAAA,EAAAuL,GAEA/G,KAAA0I,iBAAA3B,KAEAvL,EAAAoN,UAAA5I,KAAA2H,mBACA3H,KAAAqI,MD3GsB,SAACQ,EAAW9B,GAChC,IAAM+B,EAjBR,SAAkBD,EAAW9B,GAC3B,IAAK,IAAInL,EAAI,EAAGA,EAAIiN,EAAUpL,OAAQ7B,IACpC,GAAImL,EAAOgC,QAAUF,EAAUjN,GAAGmN,MAAO,OAAOnN,EAElD,OAAQ,EAaMoN,CAASH,EAAW9B,GASlC,OARe,IAAX+B,EACFD,EAAUI,KAAK,CACbF,MAAOhC,EAAOgC,MACdvD,KAAMsB,EAAuBC,KAG/B8B,EAAUC,GAAOtD,KAAOyB,EAAY4B,EAAUC,GAAOtD,KAAMuB,GAEtD8B,ECiGTK,CAAAlJ,KAAAqI,MAAAtB,GAEA/G,KAAAqI,MDtHoB,SAACQ,EAAW9B,GAC9B,IAAMoC,EArCR,SAA+BN,EAAW9B,GACxC,OAA8B,IAArB8B,EAAUpL,QAAgBoL,EAAU,GAAGE,QAAUhC,EAAOgC,MAC/DF,EAAU,GAAGrD,UACb4D,EAkCyBC,CAAsBR,EAAW9B,GACtDuC,EAAkBrC,EAAYkC,EAAoBpC,GACxD,MAAO,CAAC,CACNgC,MAAOhC,EAAOgC,MACdvD,KAAM2D,EAAqBG,EAAkBxC,EAAuBC,KCiHxEwC,CAAAvJ,KAAAqI,MAAAtB,GAEA/G,KAAA4E,MAAA,iBAAA5E,KAAAqI,SAGAmB,eAAA,SAAAnB,GACArI,KAAAqI,MAAAA,EACArI,KAAA4E,MAAA,iBAAA5E,KAAAqI,QAGAoB,cAAA,SAAA1C,GACA,IAAA,IAAAnL,EAAA,EAAAA,EAAAoE,KAAAqI,MAAA5K,OAAA7B,GAAA,EACA,GAAAoE,KAAAqI,MAAAzM,GAAAmN,QAAAhC,EAAAgC,MACA,OAAA/I,KAAAqI,MAAAzM,GAAA4J,MAAA,MAGA,OAAA,MAGAkE,kBAAA,SAAA3C,GACA,MAAA,QAAA/G,KAAAyJ,cAAA1C,GACA,YACA,cAGA4C,iBAAA5C,SAAAA,EAAA+B,GAMA,OALAc,OAAAC,OAAA,GAAA7J,KAAA4H,WAAAkB,EAAA,MAAA,CACApB,SAAA1H,KAAA0I,iBAAA3B,GACA+C,uBAAA,SAAA9J,KAAAyJ,cAAA1C,GACAgD,sBAAA,QAAA/J,KAAAyJ,cAAA1C,MAKAiD,WAAA,SAAAC,GACAjK,KAAA4E,MAAA,iBAAAqF,IAGAC,cAAA,SAAAC,GACA,OAAAC,QAAAA,OAAAC,kBAAAF,EAEA,CACAG,MAFAF,OAAAC,iBAAAF,EAAA,MAEAG,OAGA,CACAA,MAAA,SAIAtC,gBAAA,WAEA,IADA,IAAAuC,EAAA,GACA3O,EAAA,EAAAA,EAAAoE,KAAAwH,QAAA/J,OAAA7B,IACA,GAAAoE,KAAA8H,SAAA,CACA,IAAA0C,EAAA,EACAxK,KAAAqH,YAAAmD,IACAxK,KAAAmH,aAAAqD,IACA,IAAAC,EAAAzK,KAAA8H,SAAA4C,KAAA,GAAAC,MAAA/O,EAAA4O,GACAD,EAAAtB,KAAAjJ,KAAAkK,cAAAO,SAEAF,EAAAtB,KAAA,CACA2B,SAAA5K,KAAAwH,QAAA5L,GAAA0O,MAAAtK,KAAAwH,QAAA5L,GAAA0O,MAAA,OACAO,SAAA7K,KAAAwH,QAAA5L,GAAA0O,MAAAtK,KAAAwH,QAAA5L,GAAA0O,MAAA,OACAA,MAAAtK,KAAAwH,QAAA5L,GAAA0O,MAAAtK,KAAAwH,QAAA5L,GAAA0O,MAAA,SAIAtK,KAAAoI,aAAAmC,GAGAO,eAAA/D,SAAAA,EAAA+B,GACA,IAAAiC,EAAA,CACAH,SAAA7D,EAAAuD,MAAAvD,EAAAuD,MAAA,OACAO,SAAA9D,EAAAuD,MAAAvD,EAAAuD,MAAA,OACAA,MAAAvD,EAAAuD,MAAAvD,EAAAuD,MAAA,QAGA,GAAAtK,KAAA8H,SAAA,CACA9H,KAAAqH,YAAAyB,IACA9I,KAAAmH,aAAA2B,IAEA,IAAA2B,EAAAzK,KAAA8H,SAAA4C,KAAA,GAAAC,MAAA7B,GACAkC,EAAAZ,OAAAC,iBAAAI,EAAA,MACAM,EAAAT,MAAAU,EAAAV,MAEA,OAAAS,IAGA3F,QAAA,WAAA,IAAA6F,EAAAjL,KACAA,KAAAkL,WAAA,WAEA,mBAAAd,SACAa,EAAA3C,GAAA,IAAA6C,gBAAA,WACAF,EAAAjD,qBAEAiD,EAAA3C,GAAA8C,QAAAH,EAAAI,QAAAC,KAKAL,EAAAnD,UACAjD,MAAA0G,KAAAN,EAAAI,QAAA7C,MAAA,wBAAA8C,IAAAE,SAAA,GAAAA,UAAAC,SAAA,SAAAC,GACAT,EAAA3C,GAAA8C,QAAAM,WAMAC,cAAA,WACA3L,KAAAsI,IACAtI,KAAAsI,GAAAsD,cAGAvG,WAAA,CACAwG,mwDCtNA,CACA7K,KAAA,eACAC,MAAA,CACA,cACA,UACA,eACA,sBACA,aACA,QAEA2B,MAAA,CACA4E,QAAA,CACA3E,QAAAC,SAAAA,EAAAC,GACA/C,KAAA8L,0BAEA7D,MAAA,EACA/E,WAAA,IAGAb,KAAA,WACA,MAAA,CACA4H,cAAA,GACA8B,MAAA,OAGA5I,SAAA,CAKA6I,aAAA,WAEA,IAAA,IAAApQ,EAAA,EAAAA,EAAAoE,KAAAwH,QAAA/J,OAAA7B,IAAA,CACA,IAAAqQ,EAAAjM,KAAAwH,QAAA5L,GACA,GAAAqQ,EAAAC,eAAAD,EAAAC,cAAAC,QACA,OAAA,EAIA,OAAA,IAGAtI,QAAA,CAEAuI,SAAA,SAAArD,GACA,MAAA,mBAAAA,GAAAA,EAAA/H,KACA+H,EAAA/H,KAEA+H,GAGAR,MAAA,WAAA,IAAA8D,0DACArM,KAAAiK,cAAA,GAEAoC,GACArM,KAAA4E,MAAA,iBAAA5E,KAAAiK,gBAIAqC,aAAA,SAAAvF,GACA,OAAAA,EAAAmF,eACAnF,EAAAmF,cAAAC,SAGAI,WAAA,SAAAxF,GACA,OAAA/G,KAAAsM,aAAAvF,IACAA,EAAAmF,cAAAM,qBACAzF,EAAAmF,cAAAM,oBAAA/O,QAGAgP,kBAAA,SAAA1F,GACA,OAAA/G,KAAAuM,WAAAxF,IACA,WAAA2F,EAAA3F,EAAAmF,cAAAM,oBAAA,KAGAG,gBAAA,SAAA5F,GACA,OAAA/G,KAAAuM,WAAAxF,IACA,WAAA2F,EAAA3F,EAAAmF,cAAAM,oBAAA,KAGA5E,WAAA,SAAAb,GACA,IAAA6F,EAAA,YACA,OAAA7F,EAAAmF,eAAAnF,EAAAmF,cAAAhL,WAAA,CAAA0L,GAAA7F,OAAAA,EAAAA,EAAAmF,cAAAhL,WAAA2L,MAAA,OAAAC,KAAA,KAAAF,GAIAG,eAAA,SAAAhG,GAEA,OADA/G,KAAAsM,aAAAvF,IAAAA,EAAAmF,cAAAc,8BAAAjG,EAAAkG,QAIAC,QAAA,SAAAnG,GACA,MAAA,OAAAhG,OAAAf,KAAAoM,SAAArF,EAAAgC,SAGAoE,qBAAApG,SAAAA,EAAAZ,GACAnG,KAAA+L,OAAAqB,aAAApN,KAAA+L,OACA/L,KAAAqN,yBAAAtG,EAAAgC,MAAA5C,IAGAmH,qBAAAvG,SAAAA,EAAAZ,GAEA,UAAAY,EAAAmF,cAAAqB,SACAvN,KAAAwN,cAAAzG,EAAAZ,IAGAsH,iBAAA1G,SAAAA,EAAAZ,GACA,IAAAuH,EAAA3G,EAAAmF,cAAAyB,iBAAA5G,EAAAgC,MACA,mBAAAhC,EAAAmF,cAAA0B,cACAzH,EAAAY,EAAAmF,cAAA0B,YAAAzH,IAEAnG,KAAAqN,yBAAAK,EAAAvH,IAKAqH,cAAAzG,SAAAA,EAAAZ,GAAA,IAAA8E,EAAAjL,KACAA,KAAA+L,OAAAqB,aAAApN,KAAA+L,OACA/L,KAAA+L,MAAA8B,YAAA,WACA5C,EAAAoC,yBAAAtG,EAAAgC,MAAA5C,KACA,MAGAkH,yBAAAtE,SAAAA,EAAA5C,GACAnG,KAAA8N,KAAA9N,KAAAiK,cAAAjK,KAAAoM,SAAArD,GAAA5C,GACAnG,KAAA4E,MAAA,iBAAA5E,KAAAiK,gBAGA6B,uBAAA,WACA,IAAA,IAAAlQ,EAAA,EAAAA,EAAAoE,KAAAwH,QAAA/J,OAAA7B,IAAA,CACA,IAAAqQ,EAAAjM,KAAAwH,QAAA5L,GAGAoE,KAAAsM,aAAAL,SACA,IAAAA,EAAAC,cAAA6B,aACA,OAAA9B,EAAAC,cAAA6B,aACA/N,KAAA8N,KAAA9N,KAAAiK,cAAAjK,KAAAoM,SAAAH,EAAAlD,OAAAkD,EAAAC,cAAA6B,aAMA/N,KAAA4E,MAAA,iBAAA5E,KAAAiK,6nEClIA,CACAjJ,KAAA,eACAC,MAAA,CACA+M,UAAA,CACAxI,KAAAoE,QAEApC,QAAA,CACAhC,KAAAX,OAEAsC,YAAA,CACA3B,KAAA4B,SAEAC,WAAA,CACA7B,KAAA4B,SAEA6G,iBAAA,CACAzI,KAAA4B,SAEA8G,YAAA,CACA1I,KAAA,CAAA4B,QAAAd,QACAnF,SAAA,GAEAgN,iBAAA,CACA3I,KAAAqC,UAEAuG,aAAA,CACA5I,KAAAqC,UAEAD,WAAA,CACApC,KAAAqC,UAEAwG,YAAA,CACA7I,KAAAc,QAEAgI,WAAA,CACA9I,KAAAc,SAGAjE,KAAA,WACA,MAAA,IAGAc,SAAA,CACAmE,YAAA,WACA,IAAA0G,EAAAhO,KAAAgO,UACA,OADAhO,KAAAuO,iBACAP,EAAAxC,SAAArN,QAAA,SAAAqQ,GAAA,OAAAA,EAAAC,eAAAhR,SAAAuQ,EAAAxC,SAAA/N,SAGAoG,QAAA,CACA6K,kBAAA,SAAAC,GACA,OAAA,IAAA3O,KAAAkO,YACA,IAAAS,EAEAA,IAAA3O,KAAAkO,aAEAU,kBAAA,SAAA1I,GACAlG,KAAA4E,MAAA,yBAAA,CACA0J,WAAAtO,KAAAsO,WAAAO,QAAA3I,EAAAG,OAAAwI,YAKAzJ,QAAA,aAEAC,WAAA,8CCxIMyJ,EAAOlF,OAAOC,OAAO,GAAIkF,GAE/BD,EAAKE,SAAU,EAEfF,EAAKnQ,QAAU,SAAUhC,EAAGC,EAAGmK,GAC7B,SAASnI,EAAKrD,GACZ,OAAIwL,GAAUA,EAAOkI,gBACZjK,QAASzJ,GAAAA,OAAAA,GAAQwL,GAAAA,OAAAA,EAAOkI,iBAAmB,IAAIlL,MAEjDxI,EAIT,OAFAoB,EAAIiC,EAAKjC,GACTC,EAAIgC,EAAKhC,GACJsS,EAAAA,QAAQvS,GAGRuS,EAAAA,QAAQtS,GAGNuS,EAAUA,WAACxS,EAAGC,GAFZ,GAHC,GAQZkS,EAAK9Q,OAAS,SAAUvB,EAAGsK,GACzB,GAAItK,MAAAA,EAA+B,MAAO,GAE1C,IAAMqS,EAAO9J,EAAAA,MAAMvI,EAAGsK,EAAOkI,gBAAiB,IAAIlL,MAClD,OAAImL,EAAAA,QAAQJ,GACH9Q,SAAO8Q,EAAM/H,EAAOqI,mBAE7BC,QAAQC,MAA4B7S,sBAAAA,OAAAA,EAAK,MAClC,uDC/BH8S,EAAS3F,OAAOC,OAAO,GAAIkF,GAEjCQ,EAAOP,SAAU,EAEjBO,EAAOtR,gBAAkB,SAAUC,EAAQC,GACzC,OAA0C,IAAnCoR,EAAO5Q,QAAQT,EAAQC,IAIhCoR,EAAO5Q,QAAU,SAAUhC,EAAGC,GAC5B,SAASgC,EAAKrD,GAGZ,OAAIA,MAAAA,GAAuCiU,EAAAA,EACpCjU,EAAEmD,QAAQ,MAAQ,EAAI+Q,WAAWlU,GAAK6K,SAAS7K,EAAG,IAK3D,OAFAoB,EAAiB,iBAANA,EAAiBA,EAAIiC,EAAKjC,KACrCC,EAAiB,iBAANA,EAAiBA,EAAIgC,EAAKhC,KAClB,EACfD,EAAIC,EAAU,EACX,mDCrBH8S,EAAU9F,OAAOC,OAAO,GAAI0F,GAElCG,EAAQ1R,OAAS,SAAUvB,GACzB,OAAIA,MAAAA,EAAsC,GACnCgT,WAAWnM,KAAKqM,MAAU,IAAJlT,GAAW,KAAKmT,QAAQ,oDCJjDC,EAAajG,OAAOC,OAAO,GAAI0F,GAErCM,EAAW7R,OAAS,SAAUvB,GAC5B,OAAIA,MAAAA,EAAsC,GAChCgT,GAAAA,OAAAA,WAAe,IAAJhT,GAASmT,QAAQ,GAAE,sDCJpCE,EAAUlG,OAAOC,OAAO,GAAIkF,GAElCe,EAAQd,SAAU,EAElBc,EAAQ7R,gBAAkB,SAAUC,EAAQC,GAC1C,OAA2C,IAApC2R,EAAQnR,QAAQT,EAAQC,IAIjC2R,EAAQnR,QAAU,SAAUhC,EAAGC,GAC7B,SAASgC,EAAKrD,GACZ,MAAiB,kBAANA,EAAwBA,EAAI,EAAI,EAC1B,iBAANA,EAA6B,SAANA,EAAe,EAAI,GAC7CiU,EAAAA,EAKV,OAFA7S,EAAIiC,EAAKjC,KACTC,EAAIgC,EAAKhC,KACU,EACfD,EAAIC,EAAU,EACX,OCyVTmT,EAAA,GACAC,EC1We,CACblB,KAAAA,EACAY,QAAAA,EACAH,OAAAA,EACAM,WAAAA,EACAC,mDDsWFlG,OAAAqG,KAAAD,GAAAvE,SAAA,SAAA1O,GACA,IAAAmT,EAAAnT,EAAAe,QAAA,QAAA,IAAAA,QAAA,OAAA,IACAiS,EAAAG,GAAAF,EAAAjT,GAAA,WAGA,ytPAAA,CACAiE,KAAA,iBACAC,MAAA,CACAkP,UAAA,CAAAhP,QAAA,KAAAqE,KAAA4B,SACAgJ,UAAA,CAAAjP,QAAA,KAAAqE,KAAAjH,QACA8R,YAAAjJ,QACAkJ,MAAA,CAAAnP,QAAA,IACAO,KAAA,CAAAP,QAAA,SACAoP,UAAA,GACArP,WAAA,CAAAC,QAAA,sBACAqG,QAAA,GACAkD,KAAA,GACAvD,YAAAC,QACAoJ,WAAA,CAAArP,SAAA,EAAAqE,KAAA4B,SACA9F,IAAA8F,QACAqJ,cAAA,CAAAtP,QAAA,KAAAqE,KAAA,CAAAqC,SAAAtJ,SACAmS,YAAAtJ,QAEAuJ,aAAA,CAAAxP,QACA,WACA,MAAA,CACAgL,SAAA,EACA+B,aAAA,EACA0C,OAAA,QAKAC,cAAA,CAAA1P,QACA,WACA,MAAA,CACAgL,SAAA,EACA2E,mBAAA,GACAC,cAAA,gBACAC,mBAAA,QACAC,mBAAA,EACAhD,kBAAA,KAMAiD,YAAA,CAAA/P,QACA,WACA,MAAA,CACAgL,SAAA,EACAgF,iBAAA,EACAC,cAAA,MAMAC,kBAAA,CAAAlQ,QACA,WAAA,IAAAmQ,EACA,OAMAC,EANAD,EAAA,CACAnF,SAAA,EACAqF,SAAA,SACAnQ,QAAA,GACAoQ,gBAAA,KACAlQ,wBAAA,GACA,WAAA,kCACA,GAAAgQ,EAAAD,EAAA,OACA,WACAC,EAAAD,EAAA,SAAA,6BACA,GAAAA,IAKAI,cAAA,CAAAvQ,QACA,WACA,MAAA,CACAgL,SAAA,EACAoB,QAAA,KACAoE,cAAA,KACAC,SAAA,KACA5E,YAAA,mBAMA3K,KAAA,WAAA,MAAA,CAEAwP,cAAA,EAGAjQ,UAAA,QACAC,SAAA,OACAC,SAAA,OACAC,SAAA,WACAC,gBAAA,gBACAC,OAAA,KACAE,QAAA,MACAD,SAAA,OAGAmF,YAAA,EACAyK,sBAAA,EACAC,iBAAA,EACAd,mBAAA,EACAH,mBAAA,GACAC,cAAA,gBACAC,mBAAA,QAGAgB,kBAAA,EACAC,gBAAA,IAAAC,IAGAxK,UAAA,EACAyK,cAAA,KACAxK,oBAAA,EAGAjB,eAAA,EACA0L,cAAA,KACAC,oBAAA,KACAT,SAAA,KACAU,kBAAA,eACAC,sBAAA,EAGAlR,QAAA,KACAmR,UAAA,EACAC,eAAA,EACAC,kBAAA,EACAlR,0BAAA,GACAC,0BAAA,EACAkR,eAAA,UACAC,iBAAA,KAEApQ,YAAA,EACAE,eAAA,GACA2F,MAAA,GACA7B,iBAAA,GACAqM,aAAA,GACA5I,cAAA,GACA6I,aAAA,EACAC,aAAA,EACAhD,UAAAA,GAAA,KAGAnN,MAAA,CACA8H,KAAA,CACA7H,QAAA,WACA7C,KAAA4E,MAAA,oBAAA,GACA5E,KAAAgK,WAAAhK,KAAAiK,eAAA,IAEAhC,MAAA,EACA/E,WAAA,GAGA2N,cAAA,CACAhO,QAAA,WACA7C,KAAAgT,oBAEA/K,MAAA,EACA/E,WAAA,GAGAmO,kBAAA,CACAxO,QAAAC,SAAAA,EAAAC,GACAkQ,EAAA,QAAAnQ,EAAAC,IACA/C,KAAAkT,wBAGAjL,MAAA,EACA/E,WAAA,GAGAwO,cAAA,CACA7O,QAAA,gBAEAuG,IAAApJ,KAAA0R,cAAAC,eACA3R,KAAA0R,cAAAC,gBAAA3R,KAAAvB,aAGAuB,KAAAqS,oBAAArS,KAAA0R,cAAAC,cACA3R,KAAAmT,gBAEAnT,KAAAoT,oBAEAnL,MAAA,EACA/E,WAAA,GAGAgO,YAAA,CACArO,QAAAC,SAAAA,EAAAC,GACAkQ,EAAA,QAAAnQ,EAAAC,IACA/C,KAAAqT,kBAGApL,MAAA,GAGAqL,aAAAxQ,SAAAA,EAAAC,GACAkQ,EAAA,QAAAnQ,EAAAC,IACA/C,KAAA4E,MAAA,0BAAA,CACA0O,aAAAtT,KAAAsT,iBAMAnQ,SAAA,CACAoQ,YAAA,WACA,OAAAvT,KAAA0Q,YACA1Q,KAAAwT,kBAAA,cAEAxT,KAAAwT,mBAEAC,cAAA,WACA,QAAAzT,KAAA2G,OAAA,yBAEA+M,cAAA,WACA,MAAA,CACAC,SAAA,WACAvD,UAAApQ,KAAAoQ,UAAApQ,KAAAoQ,UAAA,SAIAwD,YAAA,WACA,OAAA5T,KAAA2Q,aAAAC,QAAA,iBAGAiD,qBAAA,WACA,QACA7T,KAAA2G,OAAA,uBACA3G,KAAA8T,aAAA,qBAIAC,cAAA,WACA,OAAA/T,KAAA+H,UAAAtK,QAGA,cAAAuC,KAAA+H,UAAA,GAAAkF,QACAjN,KAAA+H,UAAA,GAAAyD,SAAA/N,QAQA6J,YAAA,WACA,OACAtH,KAAAgU,iBAAA,IACAhU,KAAA+R,iBACA/R,KAAAiU,wBAAAjU,KAAAkU,oBACAlU,KAAA+R,iBACA/R,KAAAgU,mBAAAhU,KAAAmU,gBAIA5M,yBAAA,WACA,OACAvH,KAAAsH,cACAtH,KAAA+R,iBAAA/R,KAAAiU,sBAAA,IACAjU,KAAA+R,iBAAA/R,KAAAgU,iBAAA,IAIAI,cAAA,WACA,MAAA,GAAArT,OAAAf,KAAAgU,iBAAA,KAAAjT,OAAAf,KAAA+Q,gBAGAiD,iBAAA,WACA,OAAAhU,KAAAsT,aAAA7V,QAGAwW,sBAAA,WACA,OAAAjU,KAAAqU,iBAAA5W,QAGA4W,iBAAA,WACA,IAAAf,EAAA,GAQA,OAPAtT,KAAA+H,UAAA0D,SAAA,SAAAuC,GACAA,EAAAxC,SAAAC,SAAA,SAAA+C,GACAA,EAAAC,aACA6E,EAAArK,KAAAuF,SAIA8E,GAGAA,aAAA,WACA,IAAAA,EAAA,GAQA,OAPAtT,KAAAsU,cAAA7I,SAAA,SAAAuC,GACAA,EAAAxC,SAAAC,SAAA,SAAA+C,GACAA,EAAAC,aACA6E,EAAArK,KAAAuF,SAIA8E,EAAA3K,MAAA,SAAA4L,EAAAC,GAAA,OAAAD,EAAAE,cAAAD,EAAAC,kBAGApG,YAAA,WAEA,IADA,IAAAA,EAAA,EACAzS,EAAA,EAAAA,EAAAoE,KAAAwH,QAAA/J,OAAA7B,GAAA,EACAoE,KAAAwH,QAAA5L,GAAA8Y,SACArG,GAAA,GAKA,OAFArO,KAAAmH,aAAAkH,IACArO,KAAAqH,YAAAgH,IACAA,GAEAsG,iBAAA,WACA,QACA3U,KAAA2Q,cACA3Q,KAAA2Q,aAAAxE,SACAnM,KAAA2Q,aAAAiE,gBACA,WAAA5U,KAAA2Q,aAAAiE,oBAIA5U,KAAA2Q,eAAA3Q,KAAA2Q,aAAAxE,UAKA0I,oBAAA,WACA,SACA7U,KAAA2Q,cACA3Q,KAAA2Q,aAAAxE,SACAnM,KAAA2Q,aAAAiE,gBACA,WAAA5U,KAAA2Q,aAAAiE,iBAMAT,cAAA,WAKA,OAJAnU,KAAAsU,cAAAQ,QAAA,SAAA1T,EAAA4M,GAEA,OAAA5M,GADA4M,EAAAxC,SAAAwC,EAAAxC,SAAA/N,OAAA,KAEA,IAGAyW,kBAAA,WAKA,OAJAlU,KAAA+H,UAAA+M,QAAA,SAAA1T,EAAA4M,GAEA,OAAA5M,GADA4M,EAAAxC,SAAAwC,EAAAxC,SAAA/N,OAAA,KAEA,IAGAsX,iBAAA,WACA,IAAAC,EAAA,WAGA,OAFAhV,KAAAsB,MAAA0T,GAAA,QACAA,GAAA,IAAAjU,OAAAf,KAAAsQ,QAGAkD,kBAAA,WACA,IAAAwB,EAAAhV,KAAAkB,WAEA,OADA8T,GAAA,IAAAjU,OAAAf,KAAAsQ,QAIA7R,WAAA,WACA,OAAA,MAAAuB,KAAAqS,oBACArS,KAAAqS,oBACArS,KAAAwG,kBAIAyO,oBAAA,WACA,SACAjV,KAAA0G,gBACA1G,KAAAwG,kBACA,UAAAxG,KAAAoS,iBAKA,MAAApS,KAAAqS,qBAAA,UAAArS,KAAAoS,iBAIApS,KAAA8S,cACA9S,KAAA8S,aAAA,GACA,KASAwB,cAAA,WAAA,IAAArJ,EAAAjL,KAEAkV,EAAAlV,KAAA6S,aACA,GAAA,WAAA7S,KAAA0B,KACA,OAAAwT,EAIA,GAAAlV,KAAAiV,oBAAA,CAGA,IAAAE,EAAA,GACAnV,KAAA6S,aAAApH,SAAA,SAAAuC,GACAmH,EAAAlM,KAAAkM,MAAAA,IAAAnH,EAAAxC,cAEA,IAAAqH,EAAA,GACAsC,EAAA1J,SAAA,SAAA+C,GACA,IAAA,IAAA5S,EAAA,EAAAA,EAAAqP,EAAAzD,QAAA/J,OAAA7B,GAAA,EAAA,CACA,IAAAqQ,EAAAhB,EAAAzD,QAAA5L,GAEA,IAAAqQ,EAAAmJ,qBAIA,GAAAnK,EAAA2G,UAOA,GANA3G,EAAA2G,SACApD,EACAvC,EACAhB,EAAAkD,iBAAAK,EAAAvC,GACAhB,EAAAxM,YAEA,CACAoU,EAAA5J,KAAAuF,GACA,YASA,GALAzQ,EAAAE,gBACAgN,EAAAkD,iBAAAK,EAAAvC,GACAhB,EAAAxM,WACAwM,EAAAsH,sBAEA,CACAM,EAAA5J,KAAAuF,GACA,WAQAxO,KAAA4E,MAAA,YAAA,CACAnG,WAAAuB,KAAAvB,WACA4W,SAAAxC,EAAApV,SAKAyX,EAAA,GACAlV,KAAA6S,aAAApH,SAAA,SAAAuC,GACA,IAAApS,EAAAoS,EAAAsH,cACA9J,EAAAqH,EAAA1U,QAAA,SAAA9B,GAAA,OAAAA,EAAAkZ,SAAA3Z,KACA,GAAA4P,EAAA/N,OAAA,CACA,IAAA+X,EAAAzQ,KAAAC,MAAAD,KAAAE,UAAA+I,IACAwH,EAAAhK,SAAAA,EACA0J,EAAAjM,KAAAuM,OAgDA,OA5CAxV,KAAAqI,MAAA5K,QAEAyX,EAAAzJ,SAAA,SAAAgK,GACAA,EAAAjK,SAAA7C,MAAA,SAAA+M,EAAAC,GAGA,IADA,IAAAC,EACAha,EAAA,EAAAA,EAAAqP,EAAA5C,MAAA5K,OAAA7B,GAAA,EAAA,CACA,IAAAia,EAAA5K,EAAA5C,MAAAzM,GAEA,GAAAia,EAAArQ,OAAAxK,EAEA4a,EAAAA,GAAAF,EAAAjB,cAAAkB,EAAAlB,kBACA,CACA,IAAA1N,EAAAkE,EAAA6K,kBAAAD,EAAA9M,OACAgN,EAAA9K,EAAA+K,QAAAN,EAAAG,EAAA9M,OACAkN,EAAAhL,EAAA+K,QAAAL,EAAAE,EAAA9M,OAGAmN,EAAAnP,EAAAmP,OAEAN,EADAM,GAAA,mBAAAA,EAEAN,GACAM,EAAAH,EAAAE,EAAAlP,EAAA2O,EAAAC,IACAE,EAAArQ,OAAAxK,GAAA,EAAA,GAIA4a,GACA7O,EAAAoP,QAAAxX,QAAAoX,EAAAE,EAAAlP,IACA8O,EAAArQ,OAAAxK,GAAA,EAAA,IAIA,OAAA4a,QAOA,UAAA5V,KAAAoS,gBACApS,KAAA6S,aAAAqC,GAGAA,GAGAnN,UAAA,WAAA,IAAAqO,EAAApW,KACA,IAAAA,KAAAsU,cAAA7W,OAAA,MAAA,GAEA,GAAA,WAAAuC,KAAA0B,KACA,OAAA1B,KAAAsU,cAIA,IAAA+B,EAAA,GASA,GARArW,KAAAsU,cAAA7I,SAAA,SAAA6K,GAAA,IAAAC,EAEAH,EAAAzF,aAAAxE,SACAkK,EAAApN,KAAAqN,IAEAC,EAAAF,GAAApN,eAAAqN,EAAA9K,cAGAxL,KAAAwS,SAAA,CACA,IAAAgE,GAAAxW,KAAAwC,YAAA,GAAAxC,KAAA0C,gBAKA8T,GAAAH,EAAA5Y,SAAA,IAAAuC,KAAA0C,kBACA1C,KAAAwC,YAAA,EACAgU,EAAA,GAIA,IAAAC,EAAAJ,EAAA5Y,OAAA,GAGA,IAAAuC,KAAA0C,iBACA+T,EAAAzW,KAAAwC,YAAAxC,KAAA0C,gBAGA2T,EAAAA,EAAAK,MAAAF,EAAAC,GAGA,IAAAE,EAAA,GAsBA,OArBAN,EAAA5K,SAAA,SAAAmL,GAEA,QAAAxN,IAAAwN,EAAAtB,cAAA,CACAc,EAAAS,eAAAD,GACA,IAAApB,EAAAzQ,KAAAC,MAAAD,KAAAE,UAAA2R,IACApB,EAAAhK,SAAA,GACAmL,EAAA1N,KAAAuM,OACA,CAEA,IAAAsB,EAAAH,EAAAI,MAAA,SAAA1a,GAAA,OAAAA,EAAAiZ,gBAAAsB,EAAArB,UACAuB,IACAA,EAAAV,EAAA9B,cAAAyC,MAAA,SAAA1a,GAAA,OAAAA,EAAAiZ,gBAAAsB,EAAArB,cAEAuB,EAAA/R,KAAAC,MAAAD,KAAAE,UAAA6R,KACAtL,SAAA,GACAmL,EAAA1N,KAAA6N,IAGAA,EAAAtL,SAAAvC,KAAA2N,OAGAD,GAGAK,aAAA,WACA,IAAAtM,EAAA1K,KAAA0K,MAAA1K,KAAA0K,KAAAjN,OAAAsH,KAAAC,MAAAD,KAAAE,UAAAjF,KAAA0K,OAAA,GACAuM,EAAA,GASAA,EARAjX,KAAA2Q,aAAAxE,QAQAnM,KAAAkX,cAAAxM,GAPA1K,KAAAkX,cAAA,CACA,CACAjK,MAAA,YACAzB,SAAAd,KAQA,IAAA5B,EAAA,EAOA,OANAmO,EAAAxL,SAAA,SAAAuC,GACAA,EAAAxC,SAAAC,SAAA,SAAA+C,GACAA,EAAAiG,cAAA3L,UAIAmO,GAGAxP,aAAA,WAEA,IADA,IAAAD,EAAAxH,KAAAwH,QACA5L,EAAA,EAAAA,EAAAoE,KAAAwH,QAAA/J,OAAA7B,IAAA,CACA,IAAAmL,EAAAS,EAAA5L,GACAmL,EAAAoP,QAAAnW,KAAA+P,UAAAhJ,EAAAvB,OAAAzH,EAEA,OAAAyJ,GAGA2P,oBAAA,WACA,OAAAnX,KAAAoX,YAAApX,KAAAoX,WAAA,kBAIAvT,QAAA,CAGAgT,eAAA,SAAA7I,GACAhO,KAAAgS,kBACAhS,KAAAiS,gBAAAoF,IAAArJ,EAAAhO,KAAA4T,cACA5T,KAAA8N,KAAAE,EAAA,iBAAA,GAEAhO,KAAA8N,KAAAE,EAAA,iBAAA,IAGAsJ,aAAA,SAAAhV,GAAA,IAAAiV,EAAAvX,KACAgO,EAAAhO,KAAA6S,aAAAkE,MAAA,SAAA1a,GAAA,OAAAA,EAAAkb,EAAA3D,eAAAtR,KACA0L,GACAhO,KAAA8N,KAAAE,EAAA,iBAAAA,EAAAwJ,eAEAxX,KAAAgS,kBACAhE,EAAAwJ,cACAxX,KAAAiS,gBAAA1R,IAAAyN,EAAAhO,KAAA4T,cAEA5T,KAAAiS,gBAAA,OAAAjE,EAAAhO,KAAA4T,eAIA6D,UAAA,WAAA,IAAAC,EAAA1X,KACAA,KAAA6S,aAAApH,SAAA,SAAA+C,GACAkJ,EAAA5J,KAAAU,EAAA,iBAAA,GACAkJ,EAAA1F,kBACA0F,EAAAzF,gBAAA1R,IAAAiO,EAAAkJ,EAAA9D,kBAKA+D,YAAA,WAAA,IAAAC,EAAA5X,KACAA,KAAA6S,aAAApH,SAAA,SAAA+C,GACAoJ,EAAA9J,KAAAU,EAAA,iBAAA,GACAoJ,EAAA3F,gBAAA4F,YAIA/B,kBAAA,SAAA/M,GACA,IAAA,IAAAnN,EAAA,EAAAA,EAAAoE,KAAAyH,aAAAhK,OAAA7B,GAAA,EACA,GAAAoE,KAAAyH,aAAA7L,GAAAmN,QAAAA,EAAA,OAAA/I,KAAAyH,aAAA7L,IAIAuX,aAAA,WACAnT,KAAA8X,aAEA,WAAA9X,KAAA0B,MACA1B,KAAA4E,MAAA,YAAA,CACAnG,WAAAuB,KAAAvB,cAKA8J,MAAA,WACAvI,KAAAqT,iBACArT,KAAAiE,WAAA,GACAjE,KAAAwI,MAAA,wBAAAD,OAAA,GACAvI,KAAAwI,MAAA,2BACAxI,KAAAwI,MAAA,0BAAAD,OAAA,IAIAwP,iBAAA,WACA/X,KAAA4E,MAAA,gBAAA,CACAoT,SAAAhY,KAAAgU,mBAAAhU,KAAAmU,cACAb,aAAAtT,KAAAsT,gBAIA2E,oBAAA,SAAAC,GAAA,IAAAC,EAAAnY,MAEAA,KAAA+R,kBAAAmG,EAAAlY,KAAA+H,UAAA/H,KAAA6S,cACApH,SAAA,SAAAuC,EAAApS,GACAoS,EAAAxC,SAAAC,SAAA,SAAA+C,EAAA3S,GACAsc,EAAArK,KAAAU,EAAA,eAAA,SAGAxO,KAAA+X,oBAGAtP,gBAAA,WAAA,IAAA2P,EAAApY,KACAA,KAAAsH,YACAtH,KAAAiY,wBAGAjY,KAAA+R,gBAAA/R,KAAA+H,UAAA/H,KAAA6S,cACApH,SAAA,SAAAuC,GACAA,EAAAxC,SAAAC,SAAA,SAAA+C,GACA4J,EAAAtK,KAAAU,EAAA,eAAA,SAGAxO,KAAA+X,qBAGAnJ,kBAAA1I,SAAAA,EAAA8H,GAAA,IAAAqK,EAAArY,KACAgO,EAAAxC,SAAAC,SAAA,SAAA+C,GACA6J,EAAAvK,KAAAU,EAAA,cAAAtI,EAAA2I,aAIA5K,WAAA,SAAAkC,GACA,IAAAgG,EAAAnM,KAAAwS,SACA8F,EAAAtY,KAAAwI,MAAA+P,IAAAA,iBAAAC,IAAAA,cACArM,IACAnM,KAAAyS,eAAA+F,IACAA,EAAAhW,YAAA2D,GAEAnG,KAAA0S,kBAAA6F,IACAA,EAAA/V,YAAA2D,GAIAnG,KAAAwC,YAAA2D,IAIAsS,iBAAA,WACA,MAAA,CACAjW,YAAAxC,KAAAwC,YACAE,eAAA1C,KAAA0C,eACAtB,MAAAkC,KAAAC,MAAAvD,KAAAmU,cAAAnU,KAAA0C,kBAIA0B,YAAA,SAAAsU,GAEA,GADA1Y,KAAAwC,YAAAkW,EAAAlW,aACAkW,EAAA/T,OAAA,CACA,IAAA8T,EAAAzY,KAAAyY,mBACAA,EAAAhW,SAAAiW,EAAAjW,SACAzC,KAAA4E,MAAA,iBAAA6T,GACA,WAAAzY,KAAA0B,MACA1B,KAAA4E,MAAA,oBAAA,KAKA3B,eAAA,SAAAyV,GACA1Y,KAAA0C,eAAAgW,EAAAhW,eAGA,IAAAiW,EAAA3Y,KAAAqR,kBAAAG,UACAxR,KAAAwI,MAAAgQ,eAAA,QAAAG,GAAA,SAAAA,IACA3Y,KAAAwI,MAAAgQ,cAAA9V,eAAA1C,KAAA0C,iBAEA1C,KAAAwI,MAAA+P,kBAAA,WAAAI,GAAA,SAAAA,IACA3Y,KAAAwI,MAAA+P,iBAAA7V,eAAA1C,KAAA0C,gBAGA,IAAAkW,EAAA5Y,KAAAyY,mBACAzY,KAAA4E,MAAA,qBAAAgU,GACA,WAAA5Y,KAAA0B,MACA1B,KAAA4E,MAAA,oBAAA,IAIAiU,WAAA,SAAAxQ,GACArI,KAAAqI,MAAAA,EACArI,KAAA4E,MAAA,iBAAAyD,GAGArI,KAAAiE,WAAA,GAIA,WAAAjE,KAAA0B,KAIA1B,KAAA+S,aAAA,EAHA/S,KAAA4E,MAAA,oBAAA,IAOAkU,2BAAAtK,EAAA1F,EAAA5C,GAEA,GAAAA,EAAA0C,UAAA5I,KAAA+Y,WAAA,EAEA,IADA,IAAAjT,EAAAxC,KAAAsC,IAAA5F,KAAA+Y,UAAAjQ,GAAA/C,EAAAzC,KAAA0V,IAAAhZ,KAAA+Y,UAAAjQ,GACAlN,EAAAkK,EAAAlK,GAAAmK,EAAAnK,IAAAoE,KAAA8N,KAAA9N,KAAA0K,KAAA9O,GAAA,eAAA4S,EAAAC,aAEAzO,KAAA+Y,UAAAjQ,EACA9I,KAAA8N,KAAAU,EAAA,eAAAA,EAAAC,aACAzO,KAAA4E,MAAA,eAAA,CACA4J,IAAAA,EACAyK,UAAAnQ,EACAkP,WAAAxJ,EAAAC,YACAvI,MAAAA,KAIAgT,4BAAA1K,EAAA1F,EAAA5C,GACAlG,KAAA4E,MAAA,kBAAA,CACA4J,IAAAA,EACAyK,UAAAnQ,EACAkP,WAAAxJ,EAAAC,YACAvI,MAAAA,KAIAiT,sBAAA3K,EAAA1F,EAAA5C,GACAlG,KAAAqH,aAAArH,KAAA8R,sBACA9R,KAAA8N,KAAAU,EAAA,eAAAA,EAAAC,aAEAzO,KAAA4E,MAAA,eAAA,CACA4J,IAAAA,EACAyK,UAAAnQ,EACAkP,WAAAxJ,EAAAC,YACAvI,MAAAA,KAIAkT,yBAAA5K,EAAA1F,EAAA5C,GACAlG,KAAA4E,MAAA,mBAAA,CACA4J,IAAAA,EACAyK,UAAAnQ,EACAkP,WAAAxJ,EAAAC,YACAvI,MAAAA,KAIAmT,cAAA,SAAA7K,EAAAzH,EAAAuS,EAAApT,GACAlG,KAAA4E,MAAA,gBAAA,CACA4J,IAAAA,EACAzH,OAAAA,EACAuS,SAAAA,EACApT,MAAAA,KAIAqT,aAAA/K,SAAAA,EAAA1F,GACA9I,KAAA4E,MAAA,oBAAA,CACA4J,IAAAA,EACAyK,UAAAnQ,KAIA0Q,aAAAhL,SAAAA,EAAA1F,GACA9I,KAAA4E,MAAA,oBAAA,CACA4J,IAAAA,EACAyK,UAAAnQ,KAIA2Q,mBAAA,WACA,UAAAzZ,KAAAoS,gBACApS,KAAAmT,eAGAnT,KAAA6S,aAAA9N,KAAAC,MAAAD,KAAAE,UAAAjF,KAAAgX,eACAhX,KAAA8S,aAAA,EACA9S,KAAA+S,aAAA,IAIA2G,mBAAA,WACA,UAAA1Z,KAAAoS,eACApS,KAAAmT,gBAIA2E,WAAA,WACA9X,KAAAiY,qBAAA,GAEAjY,KAAAiE,WAAA,IAOA+R,QAAA2D,SAAAA,EAAA5Q,GAcA,MAAA,mBAAAA,EAAAA,EAAA4Q,GACA,iBAAA5Q,EAbA,SAAA4Q,EAAAC,GAGA,IAFA,IAAArc,EAAAoc,EACAE,EAAAD,EAAA/M,MAAA,KACAjR,EAAA,EAAAA,EAAAie,EAAApc,OAAA7B,IAAA,CACA,GAAA,MAAA2B,EACA,OAEAA,EAAAA,EAAAsc,EAAAje,IAEA,OAAA2B,EAIAuc,CAAAH,EAAA5Q,QAAA,GAIAoF,iBAAAwL,SAAAA,EAAA5S,GAAA,IACAZ,EADA6H,0DAOA,QAAA5E,KAJAjD,EADA6H,GAAAjH,EAAAgT,YACA/Z,KAAAgW,QAAA2D,EAAA5S,EAAAgT,aAEA/Z,KAAAgW,QAAA2D,EAAA5S,EAAAgC,QAEA,MAAA,GAIA,GAAAhC,EAAAiT,UAAA,mBAAAjT,EAAAiT,SACA,OAAAjT,EAAAiT,SAAA7T,EAAAwT,GAIA,IAAAnU,EAAAuB,EAAAoP,QAIA3Q,IACAA,EAAAxF,KAAA+P,UAAAhJ,EAAAvB,OAAAzH,GAGA,IAAAR,EAAAiI,EAAAxH,OAAAmI,EAAAY,GAEA,OAAA/G,KAAA0Q,aAAA,IAAAnT,GAAA,MAAAA,EACAA,EADA,KAIA6Q,aAAA,SAAAI,GAEA,IAFA,IAAAyL,0DACA7L,EAAA,GACAxS,EAAA,EAAAA,EAAAoE,KAAAyH,aAAAhK,OAAA7B,IAAA,CACA,IAAAqQ,EAAAjM,KAAAyH,aAAA7L,GAEAqQ,EAAAlD,QACAqF,EAAAnC,EAAAlD,OAAA/I,KAAAmO,iBACAK,EACAvC,EACAgO,IAIA,OAAA7L,GAIAxG,oBAAAkB,EAAAoR,EAAA1L,GACA,IAAA2L,EAAAna,KAAAyH,aAAAqB,GAAAqN,IAAAA,QAAAiE,cAAAF,EAAA,UACAlL,EAAAmH,EAAAnH,QACAhP,KAAAsB,MAAA0N,GAAA,GAEA,IAAAgG,EAAA,CACAqF,kBAAArL,EACAsL,kBAAAtL,GAUA,MALA,mBAAAoL,EACApF,EAAAoF,EAAA5L,KAAA,EACA,iBAAA4L,IACApF,EAAAoF,IAAA,GAEApF,GAIAhL,WAAA,SAAAC,GAAA,IAAAsQ,EAAAva,KAAAwa,6DAIAxa,KAAAiK,cAAAA,EACA,IAAAiL,EAAAnQ,KAAAC,MAAAD,KAAAE,UAAAjF,KAAAgX,eACAyD,GAAA,EAIA,GAAAza,KAAAiK,eAAAL,OAAAqG,KAAAjQ,KAAAiK,eAAAxM,OAAA,CAAA,IAAAid,EAAA,WAkBA,IAbA,WAAAH,EAAA7Y,MAAA8Y,IACAD,EAAAtW,WAAA,GAKAuW,GACAD,EAAA3V,MAAA,mBAAA,CACAqF,cAAAsQ,EAAAtQ,gBAKA,WAAAsQ,EAAA7Y,KAOA,OANA8Y,EACAD,EAAA3V,MAAA,oBAAA,GAGA2V,EAAA1H,aAAAqC,EAEA,CAAAzY,OAAA,GAUA,IAPA,IAAA2P,EAAA,SAAArD,GACA,MAAA,mBAAAA,GAAAA,EAAA/H,KACA+H,EAAA/H,KAEA+H,GACA4R,EAAA,SAEA/e,GACA,IAAAqQ,EAAAsO,EAAA9S,aAAA7L,GACA2e,EAAAtQ,cAAAmC,EAAAH,EAAAlD,UAEA0R,GAAA,EACAvF,EAAAzJ,SAAA,SAAAuC,GACA,IAAA4M,EAAA5M,EAAAxC,SAAArN,QAAA,SAAAqQ,GAEA,OACAvC,EAAAC,eACA,mBAAAD,EAAAC,cAAA2O,SAEA5O,EAAAC,cAAA2O,SACAN,EAAAvE,QAAAxH,EAAAvC,EAAAlD,OACAwR,EAAAtQ,cAAAmC,EAAAH,EAAAlD,SAKAkD,EAAAkK,QACAlY,gBACAsc,EAAAvE,QAAAxH,EAAAvC,EAAAlD,OACAwR,EAAAtQ,cAAAmC,EAAAH,EAAAlD,SACA,EACAkD,EAAAC,eACA,WAAAQ,EAAAT,EAAAC,cAAAM,yBAIAwB,EAAAxC,SAAAoP,OA7BAhf,EAAA,EAAAA,EAAA2e,EAAA9S,aAAAhK,OAAA7B,IAAA+e,EAAA/e,GAnCA,GAmEA,GAAA,WAAA8Q,EAAAgO,GAAA,OAAAA,EAAAje,EAIAuD,KAAA6S,aADA4H,EACAvF,EAAA/W,QAAA,SAAAxC,GAAA,OAAAA,EAAA6P,UAAA7P,EAAA6P,SAAA/N,UAEAyX,GAIA4F,gBAAA,SAAAC,GAGA,IAFA,IAAAjS,EAAA,EACA5D,GAAA,EACAtJ,EAAA,EAAAA,EAAAoE,KAAA+H,UAAAtK,OAAA7B,GAAA,EAAA,CACA,IACA4P,EADAxL,KAAA+H,UAAAnM,GACA4P,SACA,GAAAA,GAAAA,EAAA/N,OACA,IAAA,IAAA5B,EAAA,EAAAA,EAAA2P,EAAA/N,OAAA5B,GAAA,EAAA,CAEA,GADA2P,EAAA3P,GACA4Y,gBAAAsG,EAAA,CACA7V,GAAA,EACA,MAEA4D,GAAA,EAGA,GAAA5D,EAAA,MAEA,OAAAlF,KAAAwC,YAAA,GAAAxC,KAAA0C,eAAAoG,EAAA,GAGAkS,iBAAA,SAAAxM,GACA,IAEAyM,EAFAjG,EAAA,GAWA,OAVAhV,KAAAmX,sBAAAnC,GAAA,cAGAiG,EADA,mBAAAjb,KAAAyQ,cACAzQ,KAAAyQ,cAAAjC,GAEAxO,KAAAyQ,iBAGAuE,GAAA,IAAAjU,OAAAka,IAEAjG,GAGAkC,cAAA,SAAAF,GAAA,IAAAkE,EAAAlb,KAaA,OAZAgX,EAAAvL,SAAA,SAAAuC,EAAApS,GACAoS,EAAAsH,cAAA1Z,EAEAsf,EAAAvK,aAAAqB,kBACAkJ,EAAAjJ,gBAAAoF,IAAArJ,EAAAkN,EAAAvK,aAAAC,UAEAsK,EAAApN,KAAAE,EAAA,iBAAA,GAEAA,EAAAxC,SAAAC,SAAA,SAAA0P,GACAA,EAAA5F,OAAA3Z,QAGAob,GAGA9D,qBAAA,WAAA,IAAAkI,EAAApb,KAmBAqb,EAAArb,KAAAqR,kBAjBAlF,IAAAA,QACA9K,IAAAA,QACAmQ,IAAAA,SACAC,IAAAA,gBACAlQ,IAAAA,uBACA+Z,IAAAA,iBACAC,IAAAA,WACAC,IAAAA,UACAC,IAAAA,UACAC,IAAAA,UACAC,IAAAA,iBACAC,IAAAA,QACAC,IAAAA,UACAC,IAAAA,SACAC,IAAAA,eACAra,IAAAA,KACAU,IAAAA,OAmBA,GAhBA,kBAAA+J,IACAnM,KAAAwS,SAAArG,GAGA,iBAAA9K,IACArB,KAAAqB,QAAAA,GAGA,QAAAmQ,GACAxR,KAAAyS,eAAA,EACAzS,KAAA0S,kBAAA,GACA,SAAAlB,IACAxR,KAAAyS,eAAA,EACAzS,KAAA0S,kBAAA,GAGA7N,MAAAC,QAAA2M,IAAAA,EAAAhU,SACAuC,KAAAwB,0BAAAiQ,GACAzR,KAAAqB,SAAA,CAAA,IAAA2a,EAAAC,EACAxK,EAAA,GAAAzR,KAAAqB,QAAA2a,EAAA,GAIA,kBAAAza,IACAvB,KAAAuB,uBAAAA,GAGA,kBAAA+Z,IACAtb,KAAAyB,yBAAA6Z,GAGA,iBAAA5Z,IACA1B,KAAA2S,eAAAjR,GAGA,iBAAA6Z,IACAvb,KAAA4B,UAAA2Z,GAGA,iBAAAC,IACAxb,KAAA6B,SAAA2Z,GAGA,iBAAAC,IACAzb,KAAA8B,SAAA2Z,GAGA,iBAAAC,IACA1b,KAAA+B,SAAA2Z,GAGA,iBAAAC,IACA3b,KAAAgC,gBAAA2Z,GAGA,iBAAAC,IACA5b,KAAAiC,OAAA2Z,GAGA,iBAAAC,IACA7b,KAAAkC,SAAA2Z,GAGA,iBAAAC,IACA9b,KAAAmC,QAAA2Z,GAGA,iBAAAC,GACAlO,YAAA,WACAuN,EAAAnX,WAAA8X,KACA,KAGA,mBAAA3Z,IACApC,KAAA4S,iBAAAxQ,IAIAgR,iBAAA,WACA,IAOA8I,EAAAlc,KAAA0R,cANAvF,IAAAA,QACAoB,IAAAA,QACAoE,IAAAA,cACAC,IAAAA,SACA5E,IAAAA,YACA5O,IAAAA,eAGA,kBAAA+N,IACAnM,KAAA0G,cAAAyF,GAGA,UAAAoB,IACAvN,KAAAoS,cAAA7E,GAGA,iBAAAoE,IACA3R,KAAAqS,oBAAAV,GAGA,mBAAAC,IACA5R,KAAA4R,SAAAA,GAGA,iBAAA5E,IACAhN,KAAAsS,kBAAAtF,GAGA,kBAAA5O,IACA4B,KAAAuS,qBAAAnU,IAIAiV,eAAA,WACA,IAAA8I,EAAAnc,KAAAkR,YAAA/E,IAAAA,QAAAiF,IAAAA,cAAAD,IAAAA,gBACAiL,EAAArX,KAAAC,MAAAD,KAAAE,UAAAmM,GAAA,KAWA,GATA,kBAAAjF,IACAnM,KAAA0H,SAAAyE,GAGA,kBAAAgF,IACAnR,KAAA2H,mBAAAwJ,GAIA,WAAAzE,EAAA0P,GAAA,CACA,IAAAC,EAAArc,KAAAqQ,YACArQ,KAAAwI,MAAA,0BACAxI,KAAAwI,MAAA,wBACA,GAAA3D,MAAAC,QAAAsX,GACAC,EAAA7S,eAAA4S,QAEAxS,OAAA0S,UAAAC,eAAAlc,KACA+b,EACA,UAEAC,EAAA7S,eAAA,CAAA4S,MAKApJ,iBAAA,WACA,IASAwJ,EAAAxc,KAAA6Q,cARA1E,IAAAA,QACA2E,IAAAA,mBACAC,IAAAA,cACAC,IAAAA,mBACAc,IAAAA,qBACAC,IAAAA,gBACAd,IAAAA,kBACAhD,IAAAA,iBAGA,kBAAA9B,IACAnM,KAAAqH,WAAA8E,GAGA,kBAAA2F,IACA9R,KAAA8R,qBAAAA,GAGA,kBAAAC,IACA/R,KAAA+R,gBAAAA,GAGA,kBAAA9D,IACAjO,KAAAiO,iBAAAA,GAGA,kBAAAgD,IACAjR,KAAAiR,kBAAAA,GAGA,iBAAAH,IACA9Q,KAAA8Q,mBAAAA,GAGA,iBAAAC,IACA/Q,KAAA+Q,cAAAA,GAGA,iBAAAC,IACAhR,KAAAgR,mBAAAA,KAKA5L,QAAA,WACApF,KAAAqB,UACArB,KAAA0C,eAAA1C,KAAAqB,SAEArB,KAAAqT,kBAGAhO,WAAA,CACAoX,iBAAAC,EACAC,oBAAAC,EACAC,iBAAAC,EACAC,mBAAAC,8CEvqDMC,EAAqB,CACzBC,QAAQC,SAAAA,EAAK3d,GACX2d,EAAIC,UAAUC,EAAarc,KAAMqc,KAKf,oBAAXjT,QAA0BA,OAAO+S,KAC1C/S,OAAO+S,IAAIG,IAAIL"}